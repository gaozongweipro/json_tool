{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\r\n\r\n// src/fillers/monaco-editor-core.ts\r\nvar monaco_editor_core_exports = {};\r\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\r\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\r\n\r\n// src/basic-languages/typescript/typescript.ts\r\nvar conf = {\r\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  onEnterRules: [\r\n    {\r\n      beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n      afterText: /^\\s*\\*\\/$/,\r\n      action: {\r\n        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent,\r\n        appendText: \" * \"\r\n      }\r\n    },\r\n    {\r\n      beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\r\n      action: {\r\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\r\n        appendText: \" * \"\r\n      }\r\n    },\r\n    {\r\n      beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\r\n      action: {\r\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\r\n        appendText: \"* \"\r\n      }\r\n    },\r\n    {\r\n      beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\r\n      action: {\r\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\r\n        removeText: 1\r\n      }\r\n    }\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"', notIn: [\"string\"] },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\r\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"invalid\",\r\n  tokenPostfix: \".ts\",\r\n  keywords: [\r\n    \"abstract\",\r\n    \"any\",\r\n    \"as\",\r\n    \"asserts\",\r\n    \"bigint\",\r\n    \"boolean\",\r\n    \"break\",\r\n    \"case\",\r\n    \"catch\",\r\n    \"class\",\r\n    \"continue\",\r\n    \"const\",\r\n    \"constructor\",\r\n    \"debugger\",\r\n    \"declare\",\r\n    \"default\",\r\n    \"delete\",\r\n    \"do\",\r\n    \"else\",\r\n    \"enum\",\r\n    \"export\",\r\n    \"extends\",\r\n    \"false\",\r\n    \"finally\",\r\n    \"for\",\r\n    \"from\",\r\n    \"function\",\r\n    \"get\",\r\n    \"if\",\r\n    \"implements\",\r\n    \"import\",\r\n    \"in\",\r\n    \"infer\",\r\n    \"instanceof\",\r\n    \"interface\",\r\n    \"is\",\r\n    \"keyof\",\r\n    \"let\",\r\n    \"module\",\r\n    \"namespace\",\r\n    \"never\",\r\n    \"new\",\r\n    \"null\",\r\n    \"number\",\r\n    \"object\",\r\n    \"out\",\r\n    \"package\",\r\n    \"private\",\r\n    \"protected\",\r\n    \"public\",\r\n    \"override\",\r\n    \"readonly\",\r\n    \"require\",\r\n    \"global\",\r\n    \"return\",\r\n    \"satisfies\",\r\n    \"set\",\r\n    \"static\",\r\n    \"string\",\r\n    \"super\",\r\n    \"switch\",\r\n    \"symbol\",\r\n    \"this\",\r\n    \"throw\",\r\n    \"true\",\r\n    \"try\",\r\n    \"type\",\r\n    \"typeof\",\r\n    \"undefined\",\r\n    \"unique\",\r\n    \"unknown\",\r\n    \"var\",\r\n    \"void\",\r\n    \"while\",\r\n    \"with\",\r\n    \"yield\",\r\n    \"async\",\r\n    \"await\",\r\n    \"of\"\r\n  ],\r\n  operators: [\r\n    \"<=\",\r\n    \">=\",\r\n    \"==\",\r\n    \"!=\",\r\n    \"===\",\r\n    \"!==\",\r\n    \"=>\",\r\n    \"+\",\r\n    \"-\",\r\n    \"**\",\r\n    \"*\",\r\n    \"/\",\r\n    \"%\",\r\n    \"++\",\r\n    \"--\",\r\n    \"<<\",\r\n    \"</\",\r\n    \">>\",\r\n    \">>>\",\r\n    \"&\",\r\n    \"|\",\r\n    \"^\",\r\n    \"!\",\r\n    \"~\",\r\n    \"&&\",\r\n    \"||\",\r\n    \"??\",\r\n    \"?\",\r\n    \":\",\r\n    \"=\",\r\n    \"+=\",\r\n    \"-=\",\r\n    \"*=\",\r\n    \"**=\",\r\n    \"/=\",\r\n    \"%=\",\r\n    \"<<=\",\r\n    \">>=\",\r\n    \">>>=\",\r\n    \"&=\",\r\n    \"|=\",\r\n    \"^=\",\r\n    \"@\"\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  digits: /\\d+(_+\\d+)*/,\r\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\r\n  tokenizer: {\r\n    root: [[/[{}]/, \"delimiter.bracket\"], { include: \"common\" }],\r\n    common: [\r\n      [\r\n        /#?[a-z_$][\\w$]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/[A-Z][\\w\\$]*/, \"type.identifier\"],\r\n      { include: \"@whitespace\" },\r\n      [\r\n        /\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/,\r\n        { token: \"regexp\", bracket: \"@open\", next: \"@regexp\" }\r\n      ],\r\n      [/[()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [/!(?=([^=]|$))/, \"delimiter\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"delimiter\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"],\r\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"],\r\n      [/0[xX](@hexdigits)n?/, \"number.hex\"],\r\n      [/0[oO]?(@octaldigits)n?/, \"number.octal\"],\r\n      [/0[bB](@binarydigits)n?/, \"number.binary\"],\r\n      [/(@digits)n?/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/\"/, \"string\", \"@string_double\"],\r\n      [/'/, \"string\", \"@string_single\"],\r\n      [/`/, \"string\", \"@string_backtick\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    jsdoc: [\r\n      [/[^\\/*]+/, \"comment.doc\"],\r\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\r\n      [/[\\/*]/, \"comment.doc\"]\r\n    ],\r\n    regexp: [\r\n      [\r\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\r\n        [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]\r\n      ],\r\n      [\r\n        /(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\r\n        [\"regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\r\n      ],\r\n      [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]],\r\n      [/[()]/, \"regexp.escape.control\"],\r\n      [/@regexpctl/, \"regexp.escape.control\"],\r\n      [/[^\\\\\\/]/, \"regexp\"],\r\n      [/@regexpesc/, \"regexp.escape\"],\r\n      [/\\\\\\./, \"regexp.invalid\"],\r\n      [/(\\/)([dgimsuy]*)/, [{ token: \"regexp\", bracket: \"@close\", next: \"@pop\" }, \"keyword.other\"]]\r\n    ],\r\n    regexrange: [\r\n      [/-/, \"regexp.escape.control\"],\r\n      [/\\^/, \"regexp.invalid\"],\r\n      [/@regexpesc/, \"regexp.escape\"],\r\n      [/[^\\]]/, \"regexp\"],\r\n      [\r\n        /\\]/,\r\n        {\r\n          token: \"regexp.escape.control\",\r\n          next: \"@pop\",\r\n          bracket: \"@close\"\r\n        }\r\n      ]\r\n    ],\r\n    string_double: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, \"string\", \"@pop\"]\r\n    ],\r\n    string_single: [\r\n      [/[^\\\\']+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/'/, \"string\", \"@pop\"]\r\n    ],\r\n    string_backtick: [\r\n      [/\\$\\{/, { token: \"delimiter.bracket\", next: \"@bracketCounting\" }],\r\n      [/[^\\\\`$]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/`/, \"string\", \"@pop\"]\r\n    ],\r\n    bracketCounting: [\r\n      [/\\{/, \"delimiter.bracket\", \"@bracketCounting\"],\r\n      [/\\}/, \"delimiter.bracket\", \"@pop\"],\r\n      { include: \"common\" }\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
