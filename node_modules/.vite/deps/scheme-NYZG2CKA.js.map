{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/scheme/scheme.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/scheme/scheme.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \";\",\r\n    blockComment: [\"#|\", \"|#\"]\r\n  },\r\n  brackets: [\r\n    [\"(\", \")\"],\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' }\r\n  ]\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  ignoreCase: true,\r\n  tokenPostfix: \".scheme\",\r\n  brackets: [\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\r\n  ],\r\n  keywords: [\r\n    \"case\",\r\n    \"do\",\r\n    \"let\",\r\n    \"loop\",\r\n    \"if\",\r\n    \"else\",\r\n    \"when\",\r\n    \"cons\",\r\n    \"car\",\r\n    \"cdr\",\r\n    \"cond\",\r\n    \"lambda\",\r\n    \"lambda*\",\r\n    \"syntax-rules\",\r\n    \"format\",\r\n    \"set!\",\r\n    \"quote\",\r\n    \"eval\",\r\n    \"append\",\r\n    \"list\",\r\n    \"list?\",\r\n    \"member?\",\r\n    \"load\"\r\n  ],\r\n  constants: [\"#t\", \"#f\"],\r\n  operators: [\"eq?\", \"eqv?\", \"equal?\", \"and\", \"or\", \"not\", \"null?\"],\r\n  tokenizer: {\r\n    root: [\r\n      [/#[xXoObB][0-9a-fA-F]+/, \"number.hex\"],\r\n      [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, \"number.float\"],\r\n      [\r\n        /(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\r\n        [\"keyword\", \"white\", \"variable\"]\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      { include: \"@strings\" },\r\n      [\r\n        /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword\",\r\n            \"@constants\": \"constant\",\r\n            \"@operators\": \"operators\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    comment: [\r\n      [/[^\\|#]+/, \"comment\"],\r\n      [/#\\|/, \"comment\", \"@push\"],\r\n      [/\\|#/, \"comment\", \"@pop\"],\r\n      [/[\\|#]/, \"comment\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [/#\\|/, \"comment\", \"@comment\"],\r\n      [/;.*$/, \"comment\"]\r\n    ],\r\n    strings: [\r\n      [/\"$/, \"string\", \"@popall\"],\r\n      [/\"(?=.)/, \"string\", \"@multiLineString\"]\r\n    ],\r\n    multiLineString: [\r\n      [/[^\\\\\"]+$/, \"string\", \"@popall\"],\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/\\\\./, \"string.escape\"],\r\n      [/\"/, \"string\", \"@popall\"],\r\n      [/\\\\$/, \"string\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": ";;;AAQA,IAAI,OAAO;AAAA,EACT,UAAU;AAAA,IACR,aAAa;AAAA,IACb,cAAc,CAAC,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,UAAU;AAAA,IACR,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,EACX;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC1B;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC1B;AACF;AACA,IAAI,WAAW;AAAA,EACb,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,IACR,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,wBAAwB;AAAA,IACxD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,kBAAkB;AAAA,IAClD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,mBAAmB;AAAA,EACrD;AAAA,EACA,UAAU;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,WAAW,CAAC,MAAM,IAAI;AAAA,EACtB,WAAW,CAAC,OAAO,QAAQ,UAAU,OAAO,MAAM,OAAO,OAAO;AAAA,EAChE,WAAW;AAAA,IACT,MAAM;AAAA,MACJ,CAAC,yBAAyB,YAAY;AAAA,MACtC,CAAC,4CAA4C,cAAc;AAAA,MAC3D;AAAA,QACE;AAAA,QACA,CAAC,WAAW,SAAS,UAAU;AAAA,MACjC;AAAA,MACA,EAAE,SAAS,cAAc;AAAA,MACzB,EAAE,SAAS,WAAW;AAAA,MACtB;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,aAAa;AAAA,YACb,cAAc;AAAA,YACd,cAAc;AAAA,YACd,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,CAAC,WAAW,SAAS;AAAA,MACrB,CAAC,OAAO,WAAW,OAAO;AAAA,MAC1B,CAAC,OAAO,WAAW,MAAM;AAAA,MACzB,CAAC,SAAS,SAAS;AAAA,IACrB;AAAA,IACA,YAAY;AAAA,MACV,CAAC,cAAc,OAAO;AAAA,MACtB,CAAC,OAAO,WAAW,UAAU;AAAA,MAC7B,CAAC,QAAQ,SAAS;AAAA,IACpB;AAAA,IACA,SAAS;AAAA,MACP,CAAC,MAAM,UAAU,SAAS;AAAA,MAC1B,CAAC,UAAU,UAAU,kBAAkB;AAAA,IACzC;AAAA,IACA,iBAAiB;AAAA,MACf,CAAC,YAAY,UAAU,SAAS;AAAA,MAChC,CAAC,WAAW,QAAQ;AAAA,MACpB,CAAC,OAAO,eAAe;AAAA,MACvB,CAAC,KAAK,UAAU,SAAS;AAAA,MACzB,CAAC,OAAO,QAAQ;AAAA,IAClB;AAAA,EACF;AACF;",
  "names": []
}
