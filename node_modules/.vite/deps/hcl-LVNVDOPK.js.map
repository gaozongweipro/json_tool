{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/hcl/hcl.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/hcl/hcl.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"#\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"', notIn: [\"string\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' }\r\n  ]\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".hcl\",\r\n  keywords: [\r\n    \"var\",\r\n    \"local\",\r\n    \"path\",\r\n    \"for_each\",\r\n    \"any\",\r\n    \"string\",\r\n    \"number\",\r\n    \"bool\",\r\n    \"true\",\r\n    \"false\",\r\n    \"null\",\r\n    \"if \",\r\n    \"else \",\r\n    \"endif \",\r\n    \"for \",\r\n    \"in\",\r\n    \"endfor\"\r\n  ],\r\n  operators: [\r\n    \"=\",\r\n    \">=\",\r\n    \"<=\",\r\n    \"==\",\r\n    \"!=\",\r\n    \"+\",\r\n    \"-\",\r\n    \"*\",\r\n    \"/\",\r\n    \"%\",\r\n    \"&&\",\r\n    \"||\",\r\n    \"!\",\r\n    \"<\",\r\n    \">\",\r\n    \"?\",\r\n    \"...\",\r\n    \":\"\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\r\n  terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\r\n  tokenizer: {\r\n    root: [\r\n      [\r\n        /^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\r\n        [\"type\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]\r\n      ],\r\n      [\r\n        /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\r\n        [\"identifier\", \"\", \"string\", \"\", \"string\", \"\", \"@brackets\"]\r\n      ],\r\n      [\r\n        /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/,\r\n        [\"identifier\", \"\", \"string\", \"\", \"operator\", \"\", \"@brackets\"]\r\n      ],\r\n      { include: \"@terraform\" }\r\n    ],\r\n    terraform: [\r\n      [/@terraformFunctions(\\()/, [\"type\", \"@brackets\"]],\r\n      [\r\n        /[a-zA-Z_]\\w*-*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@default\": \"variable\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      { include: \"@heredoc\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"operator\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\r\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/\\d[\\d']*/, \"number\"],\r\n      [/\\d/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"/, \"string\", \"@string\"],\r\n      [/'/, \"invalid\"]\r\n    ],\r\n    heredoc: [\r\n      [/<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/, { token: \"string.heredoc.delimiter\", next: \"@heredocBody.$1\" }]\r\n    ],\r\n    heredocBody: [\r\n      [\r\n        /([\\w\\-]+)$/,\r\n        {\r\n          cases: {\r\n            \"$1==$S2\": [\r\n              {\r\n                token: \"string.heredoc.delimiter\",\r\n                next: \"@popall\"\r\n              }\r\n            ],\r\n            \"@default\": \"string.heredoc\"\r\n          }\r\n        }\r\n      ],\r\n      [/./, \"string.heredoc\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"],\r\n      [/#.*$/, \"comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    string: [\r\n      [/\\$\\{/, { token: \"delimiter\", next: \"@stringExpression\" }],\r\n      [/[^\\\\\"\\$]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, \"string\", \"@popall\"]\r\n    ],\r\n    stringInsideExpression: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, \"string\", \"@pop\"]\r\n    ],\r\n    stringExpression: [\r\n      [/\\}/, { token: \"delimiter\", next: \"@pop\" }],\r\n      [/\"/, \"string\", \"@stringInsideExpression\"],\r\n      { include: \"@terraform\" }\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": ";;;AAQA,IAAI,OAAO;AAAA,EACT,UAAU;AAAA,IACR,aAAa;AAAA,IACb,cAAc,CAAC,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,UAAU;AAAA,IACR,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,EACX;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,CAAC,QAAQ,EAAE;AAAA,EAC7C;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC1B;AACF;AACA,IAAI,WAAW;AAAA,EACb,cAAc;AAAA,EACd,cAAc;AAAA,EACd,UAAU;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,SAAS;AAAA,EACT,SAAS;AAAA,EACT,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,WAAW;AAAA,IACT,MAAM;AAAA,MACJ;AAAA,QACE;AAAA,QACA,CAAC,QAAQ,IAAI,UAAU,IAAI,UAAU,IAAI,WAAW;AAAA,MACtD;AAAA,MACA;AAAA,QACE;AAAA,QACA,CAAC,cAAc,IAAI,UAAU,IAAI,UAAU,IAAI,WAAW;AAAA,MAC5D;AAAA,MACA;AAAA,QACE;AAAA,QACA,CAAC,cAAc,IAAI,UAAU,IAAI,YAAY,IAAI,WAAW;AAAA,MAC9D;AAAA,MACA,EAAE,SAAS,aAAa;AAAA,IAC1B;AAAA,IACA,WAAW;AAAA,MACT,CAAC,2BAA2B,CAAC,QAAQ,WAAW,CAAC;AAAA,MACjD;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,aAAa,EAAE,OAAO,aAAa;AAAA,YACnC,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,EAAE,SAAS,cAAc;AAAA,MACzB,EAAE,SAAS,WAAW;AAAA,MACtB,CAAC,cAAc,WAAW;AAAA,MAC1B,CAAC,oBAAoB,WAAW;AAAA,MAChC;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,cAAc;AAAA,YACd,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,CAAC,0BAA0B,cAAc;AAAA,MACzC,CAAC,4BAA4B,cAAc;AAAA,MAC3C,CAAC,YAAY,QAAQ;AAAA,MACrB,CAAC,MAAM,QAAQ;AAAA,MACf,CAAC,SAAS,WAAW;AAAA,MACrB,CAAC,KAAK,UAAU,SAAS;AAAA,MACzB,CAAC,KAAK,SAAS;AAAA,IACjB;AAAA,IACA,SAAS;AAAA,MACP,CAAC,8BAA8B,EAAE,OAAO,4BAA4B,MAAM,kBAAkB,CAAC;AAAA,IAC/F;AAAA,IACA,aAAa;AAAA,MACX;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,WAAW;AAAA,cACT;AAAA,gBACE,OAAO;AAAA,gBACP,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,CAAC,KAAK,gBAAgB;AAAA,IACxB;AAAA,IACA,YAAY;AAAA,MACV,CAAC,cAAc,EAAE;AAAA,MACjB,CAAC,QAAQ,WAAW,UAAU;AAAA,MAC9B,CAAC,WAAW,SAAS;AAAA,MACrB,CAAC,QAAQ,SAAS;AAAA,IACpB;AAAA,IACA,SAAS;AAAA,MACP,CAAC,WAAW,SAAS;AAAA,MACrB,CAAC,QAAQ,WAAW,MAAM;AAAA,MAC1B,CAAC,SAAS,SAAS;AAAA,IACrB;AAAA,IACA,QAAQ;AAAA,MACN,CAAC,QAAQ,EAAE,OAAO,aAAa,MAAM,oBAAoB,CAAC;AAAA,MAC1D,CAAC,aAAa,QAAQ;AAAA,MACtB,CAAC,YAAY,eAAe;AAAA,MAC5B,CAAC,OAAO,uBAAuB;AAAA,MAC/B,CAAC,KAAK,UAAU,SAAS;AAAA,IAC3B;AAAA,IACA,wBAAwB;AAAA,MACtB,CAAC,WAAW,QAAQ;AAAA,MACpB,CAAC,YAAY,eAAe;AAAA,MAC5B,CAAC,OAAO,uBAAuB;AAAA,MAC/B,CAAC,KAAK,UAAU,MAAM;AAAA,IACxB;AAAA,IACA,kBAAkB;AAAA,MAChB,CAAC,MAAM,EAAE,OAAO,aAAa,MAAM,OAAO,CAAC;AAAA,MAC3C,CAAC,KAAK,UAAU,yBAAyB;AAAA,MACzC,EAAE,SAAS,aAAa;AAAA,IAC1B;AAAA,EACF;AACF;",
  "names": []
}
