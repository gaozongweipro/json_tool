{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/qsharp/qsharp.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\"\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' }\r\n  ]\r\n};\r\nvar language = {\r\n  keywords: [\r\n    \"namespace\",\r\n    \"open\",\r\n    \"as\",\r\n    \"operation\",\r\n    \"function\",\r\n    \"body\",\r\n    \"adjoint\",\r\n    \"newtype\",\r\n    \"controlled\",\r\n    \"if\",\r\n    \"elif\",\r\n    \"else\",\r\n    \"repeat\",\r\n    \"until\",\r\n    \"fixup\",\r\n    \"for\",\r\n    \"in\",\r\n    \"while\",\r\n    \"return\",\r\n    \"fail\",\r\n    \"within\",\r\n    \"apply\",\r\n    \"Adjoint\",\r\n    \"Controlled\",\r\n    \"Adj\",\r\n    \"Ctl\",\r\n    \"is\",\r\n    \"self\",\r\n    \"auto\",\r\n    \"distribute\",\r\n    \"invert\",\r\n    \"intrinsic\",\r\n    \"let\",\r\n    \"set\",\r\n    \"w/\",\r\n    \"new\",\r\n    \"not\",\r\n    \"and\",\r\n    \"or\",\r\n    \"use\",\r\n    \"borrow\",\r\n    \"using\",\r\n    \"borrowing\",\r\n    \"mutable\",\r\n    \"internal\"\r\n  ],\r\n  typeKeywords: [\r\n    \"Unit\",\r\n    \"Int\",\r\n    \"BigInt\",\r\n    \"Double\",\r\n    \"Bool\",\r\n    \"String\",\r\n    \"Qubit\",\r\n    \"Result\",\r\n    \"Pauli\",\r\n    \"Range\"\r\n  ],\r\n  invalidKeywords: [\r\n    \"abstract\",\r\n    \"base\",\r\n    \"bool\",\r\n    \"break\",\r\n    \"byte\",\r\n    \"case\",\r\n    \"catch\",\r\n    \"char\",\r\n    \"checked\",\r\n    \"class\",\r\n    \"const\",\r\n    \"continue\",\r\n    \"decimal\",\r\n    \"default\",\r\n    \"delegate\",\r\n    \"do\",\r\n    \"double\",\r\n    \"enum\",\r\n    \"event\",\r\n    \"explicit\",\r\n    \"extern\",\r\n    \"finally\",\r\n    \"fixed\",\r\n    \"float\",\r\n    \"foreach\",\r\n    \"goto\",\r\n    \"implicit\",\r\n    \"int\",\r\n    \"interface\",\r\n    \"lock\",\r\n    \"long\",\r\n    \"null\",\r\n    \"object\",\r\n    \"operator\",\r\n    \"out\",\r\n    \"override\",\r\n    \"params\",\r\n    \"private\",\r\n    \"protected\",\r\n    \"public\",\r\n    \"readonly\",\r\n    \"ref\",\r\n    \"sbyte\",\r\n    \"sealed\",\r\n    \"short\",\r\n    \"sizeof\",\r\n    \"stackalloc\",\r\n    \"static\",\r\n    \"string\",\r\n    \"struct\",\r\n    \"switch\",\r\n    \"this\",\r\n    \"throw\",\r\n    \"try\",\r\n    \"typeof\",\r\n    \"unit\",\r\n    \"ulong\",\r\n    \"unchecked\",\r\n    \"unsafe\",\r\n    \"ushort\",\r\n    \"virtual\",\r\n    \"void\",\r\n    \"volatile\"\r\n  ],\r\n  constants: [\"true\", \"false\", \"PauliI\", \"PauliX\", \"PauliY\", \"PauliZ\", \"One\", \"Zero\"],\r\n  builtin: [\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n    \"H\",\r\n    \"HY\",\r\n    \"S\",\r\n    \"T\",\r\n    \"SWAP\",\r\n    \"CNOT\",\r\n    \"CCNOT\",\r\n    \"MultiX\",\r\n    \"R\",\r\n    \"RFrac\",\r\n    \"Rx\",\r\n    \"Ry\",\r\n    \"Rz\",\r\n    \"R1\",\r\n    \"R1Frac\",\r\n    \"Exp\",\r\n    \"ExpFrac\",\r\n    \"Measure\",\r\n    \"M\",\r\n    \"MultiM\",\r\n    \"Message\",\r\n    \"Length\",\r\n    \"Assert\",\r\n    \"AssertProb\",\r\n    \"AssertEqual\"\r\n  ],\r\n  operators: [\r\n    \"and=\",\r\n    \"<-\",\r\n    \"->\",\r\n    \"*\",\r\n    \"*=\",\r\n    \"@\",\r\n    \"!\",\r\n    \"^\",\r\n    \"^=\",\r\n    \":\",\r\n    \"::\",\r\n    \"..\",\r\n    \"==\",\r\n    \"...\",\r\n    \"=\",\r\n    \"=>\",\r\n    \">\",\r\n    \">=\",\r\n    \"<\",\r\n    \"<=\",\r\n    \"-\",\r\n    \"-=\",\r\n    \"!=\",\r\n    \"or=\",\r\n    \"%\",\r\n    \"%=\",\r\n    \"|\",\r\n    \"+\",\r\n    \"+=\",\r\n    \"?\",\r\n    \"/\",\r\n    \"/=\",\r\n    \"&&&\",\r\n    \"&&&=\",\r\n    \"^^^\",\r\n    \"^^^=\",\r\n    \">>>\",\r\n    \">>>=\",\r\n    \"<<<\",\r\n    \"<<<=\",\r\n    \"|||\",\r\n    \"|||=\",\r\n    \"~~~\",\r\n    \"_\",\r\n    \"w/\",\r\n    \"w/=\"\r\n  ],\r\n  namespaceFollows: [\"namespace\", \"open\"],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%@._]+/,\r\n  escapes: /\\\\[\\s\\S]/,\r\n  tokenizer: {\r\n    root: [\r\n      [\r\n        /[a-zA-Z_$][\\w$]*/,\r\n        {\r\n          cases: {\r\n            \"@namespaceFollows\": {\r\n              token: \"keyword.$0\",\r\n              next: \"@namespace\"\r\n            },\r\n            \"@typeKeywords\": \"type\",\r\n            \"@keywords\": \"keyword\",\r\n            \"@constants\": \"constant\",\r\n            \"@builtin\": \"keyword\",\r\n            \"@invalidKeywords\": \"invalid\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }],\r\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/\\d+/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    namespace: [\r\n      { include: \"@whitespace\" },\r\n      [/[A-Za-z]\\w*/, \"namespace\"],\r\n      [/[\\.=]/, \"delimiter\"],\r\n      [\"\", \"\", \"@pop\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [/(\\/\\/).*/, \"comment\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
