{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/ruby/ruby.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"#\",\r\n    blockComment: [\"=begin\", \"=end\"]\r\n  },\r\n  brackets: [\r\n    [\"(\", \")\"],\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  indentationRules: {\r\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\r\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\r\n  }\r\n};\r\nvar language = {\r\n  tokenPostfix: \".ruby\",\r\n  keywords: [\r\n    \"__LINE__\",\r\n    \"__ENCODING__\",\r\n    \"__FILE__\",\r\n    \"BEGIN\",\r\n    \"END\",\r\n    \"alias\",\r\n    \"and\",\r\n    \"begin\",\r\n    \"break\",\r\n    \"case\",\r\n    \"class\",\r\n    \"def\",\r\n    \"defined?\",\r\n    \"do\",\r\n    \"else\",\r\n    \"elsif\",\r\n    \"end\",\r\n    \"ensure\",\r\n    \"for\",\r\n    \"false\",\r\n    \"if\",\r\n    \"in\",\r\n    \"module\",\r\n    \"next\",\r\n    \"nil\",\r\n    \"not\",\r\n    \"or\",\r\n    \"redo\",\r\n    \"rescue\",\r\n    \"retry\",\r\n    \"return\",\r\n    \"self\",\r\n    \"super\",\r\n    \"then\",\r\n    \"true\",\r\n    \"undef\",\r\n    \"unless\",\r\n    \"until\",\r\n    \"when\",\r\n    \"while\",\r\n    \"yield\"\r\n  ],\r\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\r\n  builtins: [\r\n    \"require\",\r\n    \"public\",\r\n    \"private\",\r\n    \"include\",\r\n    \"extend\",\r\n    \"attr_reader\",\r\n    \"protected\",\r\n    \"private_class_method\",\r\n    \"protected_class_method\",\r\n    \"new\"\r\n  ],\r\n  declarations: [\r\n    \"module\",\r\n    \"class\",\r\n    \"def\",\r\n    \"case\",\r\n    \"do\",\r\n    \"begin\",\r\n    \"for\",\r\n    \"if\",\r\n    \"while\",\r\n    \"until\",\r\n    \"unless\"\r\n  ],\r\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\r\n  operators: [\r\n    \"^\",\r\n    \"&\",\r\n    \"|\",\r\n    \"<=>\",\r\n    \"==\",\r\n    \"===\",\r\n    \"!~\",\r\n    \"=~\",\r\n    \">\",\r\n    \">=\",\r\n    \"<\",\r\n    \"<=\",\r\n    \"<<\",\r\n    \">>\",\r\n    \"+\",\r\n    \"-\",\r\n    \"*\",\r\n    \"/\",\r\n    \"%\",\r\n    \"**\",\r\n    \"~\",\r\n    \"+@\",\r\n    \"-@\",\r\n    \"[]\",\r\n    \"[]=\",\r\n    \"`\",\r\n    \"+=\",\r\n    \"-=\",\r\n    \"*=\",\r\n    \"**=\",\r\n    \"/=\",\r\n    \"^=\",\r\n    \"%=\",\r\n    \"<<=\",\r\n    \">>=\",\r\n    \"&=\",\r\n    \"&&=\",\r\n    \"||=\",\r\n    \"|=\"\r\n  ],\r\n  brackets: [\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\r\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n  decpart: /\\d(_?\\d)*/,\r\n  decimal: /0|@decpart/,\r\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\r\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\r\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\r\n  tokenizer: {\r\n    root: [\r\n      [\r\n        /^(\\s*)([a-z_]\\w*[!?=]?)/,\r\n        [\r\n          \"white\",\r\n          {\r\n            cases: {\r\n              \"for|until|while\": {\r\n                token: \"keyword.$2\",\r\n                next: \"@dodecl.$2\"\r\n              },\r\n              \"@declarations\": {\r\n                token: \"keyword.$2\",\r\n                next: \"@root.$2\"\r\n              },\r\n              end: { token: \"keyword.$S2\", next: \"@pop\" },\r\n              \"@keywords\": \"keyword\",\r\n              \"@builtins\": \"predefined\",\r\n              \"@default\": \"identifier\"\r\n            }\r\n          }\r\n        ]\r\n      ],\r\n      [\r\n        /[a-z_]\\w*[!?=]?/,\r\n        {\r\n          cases: {\r\n            \"if|unless|while|until\": {\r\n              token: \"keyword.$0x\",\r\n              next: \"@modifier.$0x\"\r\n            },\r\n            for: { token: \"keyword.$2\", next: \"@dodecl.$2\" },\r\n            \"@linedecls\": { token: \"keyword.$0\", next: \"@root.$0\" },\r\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\r\n            \"@keywords\": \"keyword\",\r\n            \"@builtins\": \"predefined\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"],\r\n      [/\\$[\\w]*/, \"global.constant\"],\r\n      [/@[\\w]*/, \"namespace.instance.identifier\"],\r\n      [/@@@[\\w]*/, \"namespace.class.identifier\"],\r\n      [/<<[-~](@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\r\n      [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\r\n      [/^<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\r\n      { include: \"@whitespace\" },\r\n      [/\"/, { token: \"string.d.delim\", next: '@dstring.d.\"' }],\r\n      [/'/, { token: \"string.sq.delim\", next: \"@sstring.sq\" }],\r\n      [/%([rsqxwW]|Q?)/, { token: \"@rematch\", next: \"pstring\" }],\r\n      [/`/, { token: \"string.x.delim\", next: \"@dstring.x.`\" }],\r\n      [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"],\r\n      [/:\"/, { token: \"string.s.delim\", next: '@dstring.s.\"' }],\r\n      [/:'/, { token: \"string.s.delim\", next: \"@sstring.s\" }],\r\n      [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: \"regexp.delim\", next: \"@regexp\" }],\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@keywordops\": \"keyword\",\r\n            \"@operators\": \"operator\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/[;,]/, \"delimiter\"],\r\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"],\r\n      [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"],\r\n      [/0[bB][01](_?[01])*/, \"number.binary\"],\r\n      [/0[dD]@decpart/, \"number\"],\r\n      [\r\n        /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\r\n        {\r\n          cases: {\r\n            $1: \"number.float\",\r\n            \"@default\": \"number\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    dodecl: [\r\n      [/^/, { token: \"\", switchTo: \"@root.$S2\" }],\r\n      [\r\n        /[a-z_]\\w*[!?=]?/,\r\n        {\r\n          cases: {\r\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\r\n            do: { token: \"keyword\", switchTo: \"@root.$S2\" },\r\n            \"@linedecls\": {\r\n              token: \"@rematch\",\r\n              switchTo: \"@root.$S2\"\r\n            },\r\n            \"@keywords\": \"keyword\",\r\n            \"@builtins\": \"predefined\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@root\" }\r\n    ],\r\n    modifier: [\r\n      [/^/, \"\", \"@pop\"],\r\n      [\r\n        /[a-z_]\\w*[!?=]?/,\r\n        {\r\n          cases: {\r\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\r\n            \"then|else|elsif|do\": {\r\n              token: \"keyword\",\r\n              switchTo: \"@root.$S2\"\r\n            },\r\n            \"@linedecls\": {\r\n              token: \"@rematch\",\r\n              switchTo: \"@root.$S2\"\r\n            },\r\n            \"@keywords\": \"keyword\",\r\n            \"@builtins\": \"predefined\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@root\" }\r\n    ],\r\n    sstring: [\r\n      [/[^\\\\']+/, \"string.$S2\"],\r\n      [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"],\r\n      [/\\\\./, \"string.$S2.invalid\"],\r\n      [/'/, { token: \"string.$S2.delim\", next: \"@pop\" }]\r\n    ],\r\n    dstring: [\r\n      [/[^\\\\`\"#]+/, \"string.$S2\"],\r\n      [/#/, \"string.$S2.escape\", \"@interpolated\"],\r\n      [/\\\\$/, \"string.$S2.escape\"],\r\n      [/@escapes/, \"string.$S2.escape\"],\r\n      [/\\\\./, \"string.$S2.escape.invalid\"],\r\n      [\r\n        /[`\"]/,\r\n        {\r\n          cases: {\r\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@pop\" },\r\n            \"@default\": \"string.$S2\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    heredoc: [\r\n      [\r\n        /^(\\s*)(@heredelim)$/,\r\n        {\r\n          cases: {\r\n            \"$2==$S2\": [\"string.heredoc\", { token: \"string.heredoc.delimiter\", next: \"@pop\" }],\r\n            \"@default\": [\"string.heredoc\", \"string.heredoc\"]\r\n          }\r\n        }\r\n      ],\r\n      [/.*/, \"string.heredoc\"]\r\n    ],\r\n    interpolated: [\r\n      [/\\$\\w*/, \"global.constant\", \"@pop\"],\r\n      [/@\\w*/, \"namespace.class.identifier\", \"@pop\"],\r\n      [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"],\r\n      [\r\n        /[{]/,\r\n        {\r\n          token: \"string.escape.curly\",\r\n          switchTo: \"@interpolated_compound\"\r\n        }\r\n      ],\r\n      [\"\", \"\", \"@pop\"]\r\n    ],\r\n    interpolated_compound: [\r\n      [/[}]/, { token: \"string.escape.curly\", next: \"@pop\" }],\r\n      { include: \"@root\" }\r\n    ],\r\n    pregexp: [\r\n      { include: \"@whitespace\" },\r\n      [\r\n        /[^\\(\\{\\[\\\\]/,\r\n        {\r\n          cases: {\r\n            \"$#==$S3\": { token: \"regexp.delim\", next: \"@pop\" },\r\n            \"$#==$S2\": { token: \"regexp.delim\", next: \"@push\" },\r\n            \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\r\n            \"~@regexpctl\": \"regexp.escape.control\",\r\n            \"@default\": \"regexp\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@regexcontrol\" }\r\n    ],\r\n    regexp: [\r\n      { include: \"@regexcontrol\" },\r\n      [/[^\\\\\\/]/, \"regexp\"],\r\n      [\"/[ixmp]*\", { token: \"regexp.delim\" }, \"@pop\"]\r\n    ],\r\n    regexcontrol: [\r\n      [\r\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\r\n        [\r\n          \"@brackets.regexp.escape.control\",\r\n          \"regexp.escape.control\",\r\n          \"@brackets.regexp.escape.control\"\r\n        ]\r\n      ],\r\n      [\r\n        /(\\[)(\\^?)/,\r\n        [\"@brackets.regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\r\n      ],\r\n      [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]],\r\n      [/\\(\\?#/, { token: \"regexp.escape.control\", next: \"@regexpcomment\" }],\r\n      [/[()]/, \"@brackets.regexp.escape.control\"],\r\n      [/@regexpctl/, \"regexp.escape.control\"],\r\n      [/\\\\$/, \"regexp.escape\"],\r\n      [/@regexpesc/, \"regexp.escape\"],\r\n      [/\\\\\\./, \"regexp.invalid\"],\r\n      [/#/, \"regexp.escape\", \"@interpolated\"]\r\n    ],\r\n    regexrange: [\r\n      [/-/, \"regexp.escape.control\"],\r\n      [/\\^/, \"regexp.invalid\"],\r\n      [/\\\\$/, \"regexp.escape\"],\r\n      [/@regexpesc/, \"regexp.escape\"],\r\n      [/[^\\]]/, \"regexp\"],\r\n      [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]\r\n    ],\r\n    regexpcomment: [\r\n      [/[^)]+/, \"comment\"],\r\n      [/\\)/, { token: \"regexp.escape.control\", next: \"@pop\" }]\r\n    ],\r\n    pstring: [\r\n      [/%([qws])\\(/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.(.)\" }],\r\n      [/%([qws])\\[/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.[.]\" }],\r\n      [/%([qws])\\{/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.{.}\" }],\r\n      [/%([qws])</, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.<.>\" }],\r\n      [/%([qws])(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.$2.$2\" }],\r\n      [/%r\\(/, { token: \"regexp.delim\", switchTo: \"@pregexp.(.)\" }],\r\n      [/%r\\[/, { token: \"regexp.delim\", switchTo: \"@pregexp.[.]\" }],\r\n      [/%r\\{/, { token: \"regexp.delim\", switchTo: \"@pregexp.{.}\" }],\r\n      [/%r</, { token: \"regexp.delim\", switchTo: \"@pregexp.<.>\" }],\r\n      [/%r(@delim)/, { token: \"regexp.delim\", switchTo: \"@pregexp.$1.$1\" }],\r\n      [/%(x|W|Q?)\\(/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.(.)\" }],\r\n      [/%(x|W|Q?)\\[/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.[.]\" }],\r\n      [/%(x|W|Q?)\\{/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.{.}\" }],\r\n      [/%(x|W|Q?)</, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.<.>\" }],\r\n      [/%(x|W|Q?)(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.$2.$2\" }],\r\n      [/%([rqwsxW]|Q?)./, { token: \"invalid\", next: \"@pop\" }],\r\n      [/./, { token: \"invalid\", next: \"@pop\" }]\r\n    ],\r\n    qstring: [\r\n      [/\\\\$/, \"string.$S2.escape\"],\r\n      [/\\\\./, \"string.$S2.escape\"],\r\n      [\r\n        /./,\r\n        {\r\n          cases: {\r\n            \"$#==$S4\": { token: \"string.$S2.delim\", next: \"@pop\" },\r\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@push\" },\r\n            \"@default\": \"string.$S2\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], { include: \"@qstring\" }],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/^\\s*=begin\\b/, \"comment\", \"@comment\"],\r\n      [/#.*$/, \"comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^=]+/, \"comment\"],\r\n      [/^\\s*=begin\\b/, \"comment.invalid\"],\r\n      [/^\\s*=end\\b.*/, \"comment\", \"@pop\"],\r\n      [/[=]/, \"comment\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
