{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/lexon/lexon.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"COMMENT\"\r\n  },\r\n  brackets: [[\"(\", \")\"]],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \":\", close: \".\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"`\", close: \"`\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" },\r\n    { open: \":\", close: \".\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\r\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  tokenPostfix: \".lexon\",\r\n  ignoreCase: true,\r\n  keywords: [\r\n    \"lexon\",\r\n    \"lex\",\r\n    \"clause\",\r\n    \"terms\",\r\n    \"contracts\",\r\n    \"may\",\r\n    \"pay\",\r\n    \"pays\",\r\n    \"appoints\",\r\n    \"into\",\r\n    \"to\"\r\n  ],\r\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\r\n  operators: [\r\n    \"less\",\r\n    \"greater\",\r\n    \"equal\",\r\n    \"le\",\r\n    \"gt\",\r\n    \"or\",\r\n    \"and\",\r\n    \"add\",\r\n    \"added\",\r\n    \"subtract\",\r\n    \"subtracted\",\r\n    \"multiply\",\r\n    \"multiplied\",\r\n    \"times\",\r\n    \"divide\",\r\n    \"divided\",\r\n    \"is\",\r\n    \"be\",\r\n    \"certified\"\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  tokenizer: {\r\n    root: [\r\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\r\n      [\r\n        /\"/,\r\n        {\r\n          token: \"identifier.quote\",\r\n          bracket: \"@open\",\r\n          next: \"@quoted_identifier\"\r\n        }\r\n      ],\r\n      [\r\n        \"LEX$\",\r\n        {\r\n          token: \"keyword\",\r\n          bracket: \"@open\",\r\n          next: \"@identifier_until_period\"\r\n        }\r\n      ],\r\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\r\n      [\r\n        \":\",\r\n        {\r\n          token: \"delimiter\",\r\n          bracket: \"@open\",\r\n          next: \"@identifier_until_period\"\r\n        }\r\n      ],\r\n      [\r\n        /[a-z_$][\\w$]*/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"operator\",\r\n            \"@typeKeywords\": \"keyword.type\",\r\n            \"@keywords\": \"keyword\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [/@symbols/, \"delimiter\"],\r\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\r\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\r\n      [/\\d+/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"]\r\n    ],\r\n    quoted_identifier: [\r\n      [/[^\\\\\"]+/, \"identifier\"],\r\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    space_identifier_until_period: [\r\n      [\":\", \"delimiter\"],\r\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\r\n    ],\r\n    identifier_until_period: [\r\n      { include: \"@whitespace\" },\r\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\r\n      [/[^\\\\.]+/, \"identifier\"],\r\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    identifier_rest: [\r\n      [/[^\\\\.]+/, \"identifier\"],\r\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    semver: [\r\n      { include: \"@whitespace\" },\r\n      [\":\", \"delimiter\"],\r\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
