{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/postiats/postiats.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"(*\", \"*)\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"],\r\n    [\"<\", \">\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\r\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\r\n  ]\r\n};\r\nvar language = {\r\n  tokenPostfix: \".pats\",\r\n  defaultToken: \"invalid\",\r\n  keywords: [\r\n    \"abstype\",\r\n    \"abst0ype\",\r\n    \"absprop\",\r\n    \"absview\",\r\n    \"absvtype\",\r\n    \"absviewtype\",\r\n    \"absvt0ype\",\r\n    \"absviewt0ype\",\r\n    \"as\",\r\n    \"and\",\r\n    \"assume\",\r\n    \"begin\",\r\n    \"classdec\",\r\n    \"datasort\",\r\n    \"datatype\",\r\n    \"dataprop\",\r\n    \"dataview\",\r\n    \"datavtype\",\r\n    \"dataviewtype\",\r\n    \"do\",\r\n    \"end\",\r\n    \"extern\",\r\n    \"extype\",\r\n    \"extvar\",\r\n    \"exception\",\r\n    \"fn\",\r\n    \"fnx\",\r\n    \"fun\",\r\n    \"prfn\",\r\n    \"prfun\",\r\n    \"praxi\",\r\n    \"castfn\",\r\n    \"if\",\r\n    \"then\",\r\n    \"else\",\r\n    \"ifcase\",\r\n    \"in\",\r\n    \"infix\",\r\n    \"infixl\",\r\n    \"infixr\",\r\n    \"prefix\",\r\n    \"postfix\",\r\n    \"implmnt\",\r\n    \"implement\",\r\n    \"primplmnt\",\r\n    \"primplement\",\r\n    \"import\",\r\n    \"let\",\r\n    \"local\",\r\n    \"macdef\",\r\n    \"macrodef\",\r\n    \"nonfix\",\r\n    \"symelim\",\r\n    \"symintr\",\r\n    \"overload\",\r\n    \"of\",\r\n    \"op\",\r\n    \"rec\",\r\n    \"sif\",\r\n    \"scase\",\r\n    \"sortdef\",\r\n    \"sta\",\r\n    \"stacst\",\r\n    \"stadef\",\r\n    \"static\",\r\n    \"staload\",\r\n    \"dynload\",\r\n    \"try\",\r\n    \"tkindef\",\r\n    \"typedef\",\r\n    \"propdef\",\r\n    \"viewdef\",\r\n    \"vtypedef\",\r\n    \"viewtypedef\",\r\n    \"prval\",\r\n    \"var\",\r\n    \"prvar\",\r\n    \"when\",\r\n    \"where\",\r\n    \"with\",\r\n    \"withtype\",\r\n    \"withprop\",\r\n    \"withview\",\r\n    \"withvtype\",\r\n    \"withviewtype\"\r\n  ],\r\n  keywords_dlr: [\r\n    \"$delay\",\r\n    \"$ldelay\",\r\n    \"$arrpsz\",\r\n    \"$arrptrsize\",\r\n    \"$d2ctype\",\r\n    \"$effmask\",\r\n    \"$effmask_ntm\",\r\n    \"$effmask_exn\",\r\n    \"$effmask_ref\",\r\n    \"$effmask_wrt\",\r\n    \"$effmask_all\",\r\n    \"$extern\",\r\n    \"$extkind\",\r\n    \"$extype\",\r\n    \"$extype_struct\",\r\n    \"$extval\",\r\n    \"$extfcall\",\r\n    \"$extmcall\",\r\n    \"$literal\",\r\n    \"$myfilename\",\r\n    \"$mylocation\",\r\n    \"$myfunction\",\r\n    \"$lst\",\r\n    \"$lst_t\",\r\n    \"$lst_vt\",\r\n    \"$list\",\r\n    \"$list_t\",\r\n    \"$list_vt\",\r\n    \"$rec\",\r\n    \"$rec_t\",\r\n    \"$rec_vt\",\r\n    \"$record\",\r\n    \"$record_t\",\r\n    \"$record_vt\",\r\n    \"$tup\",\r\n    \"$tup_t\",\r\n    \"$tup_vt\",\r\n    \"$tuple\",\r\n    \"$tuple_t\",\r\n    \"$tuple_vt\",\r\n    \"$break\",\r\n    \"$continue\",\r\n    \"$raise\",\r\n    \"$showtype\",\r\n    \"$vcopyenv_v\",\r\n    \"$vcopyenv_vt\",\r\n    \"$tempenver\",\r\n    \"$solver_assert\",\r\n    \"$solver_verify\"\r\n  ],\r\n  keywords_srp: [\r\n    \"#if\",\r\n    \"#ifdef\",\r\n    \"#ifndef\",\r\n    \"#then\",\r\n    \"#elif\",\r\n    \"#elifdef\",\r\n    \"#elifndef\",\r\n    \"#else\",\r\n    \"#endif\",\r\n    \"#error\",\r\n    \"#prerr\",\r\n    \"#print\",\r\n    \"#assert\",\r\n    \"#undef\",\r\n    \"#define\",\r\n    \"#include\",\r\n    \"#require\",\r\n    \"#pragma\",\r\n    \"#codegen2\",\r\n    \"#codegen3\"\r\n  ],\r\n  irregular_keyword_list: [\r\n    \"val+\",\r\n    \"val-\",\r\n    \"val\",\r\n    \"case+\",\r\n    \"case-\",\r\n    \"case\",\r\n    \"addr@\",\r\n    \"addr\",\r\n    \"fold@\",\r\n    \"free@\",\r\n    \"fix@\",\r\n    \"fix\",\r\n    \"lam@\",\r\n    \"lam\",\r\n    \"llam@\",\r\n    \"llam\",\r\n    \"viewt@ype+\",\r\n    \"viewt@ype-\",\r\n    \"viewt@ype\",\r\n    \"viewtype+\",\r\n    \"viewtype-\",\r\n    \"viewtype\",\r\n    \"view+\",\r\n    \"view-\",\r\n    \"view@\",\r\n    \"view\",\r\n    \"type+\",\r\n    \"type-\",\r\n    \"type\",\r\n    \"vtype+\",\r\n    \"vtype-\",\r\n    \"vtype\",\r\n    \"vt@ype+\",\r\n    \"vt@ype-\",\r\n    \"vt@ype\",\r\n    \"viewt@ype+\",\r\n    \"viewt@ype-\",\r\n    \"viewt@ype\",\r\n    \"viewtype+\",\r\n    \"viewtype-\",\r\n    \"viewtype\",\r\n    \"prop+\",\r\n    \"prop-\",\r\n    \"prop\",\r\n    \"type+\",\r\n    \"type-\",\r\n    \"type\",\r\n    \"t@ype\",\r\n    \"t@ype+\",\r\n    \"t@ype-\",\r\n    \"abst@ype\",\r\n    \"abstype\",\r\n    \"absviewt@ype\",\r\n    \"absvt@ype\",\r\n    \"for*\",\r\n    \"for\",\r\n    \"while*\",\r\n    \"while\"\r\n  ],\r\n  keywords_types: [\r\n    \"bool\",\r\n    \"double\",\r\n    \"byte\",\r\n    \"int\",\r\n    \"short\",\r\n    \"char\",\r\n    \"void\",\r\n    \"unit\",\r\n    \"long\",\r\n    \"float\",\r\n    \"string\",\r\n    \"strptr\"\r\n  ],\r\n  keywords_effects: [\r\n    \"0\",\r\n    \"fun\",\r\n    \"clo\",\r\n    \"prf\",\r\n    \"funclo\",\r\n    \"cloptr\",\r\n    \"cloref\",\r\n    \"ref\",\r\n    \"ntm\",\r\n    \"1\"\r\n  ],\r\n  operators: [\r\n    \"@\",\r\n    \"!\",\r\n    \"|\",\r\n    \"`\",\r\n    \":\",\r\n    \"$\",\r\n    \".\",\r\n    \"=\",\r\n    \"#\",\r\n    \"~\",\r\n    \"..\",\r\n    \"...\",\r\n    \"=>\",\r\n    \"=<>\",\r\n    \"=/=>\",\r\n    \"=>>\",\r\n    \"=/=>>\",\r\n    \"<\",\r\n    \">\",\r\n    \"><\",\r\n    \".<\",\r\n    \">.\",\r\n    \".<>.\",\r\n    \"->\",\r\n    \"-<>\"\r\n  ],\r\n  brackets: [\r\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\r\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\r\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  IDENTFST: /[a-zA-Z_]/,\r\n  IDENTRST: /[a-zA-Z0-9_'$]/,\r\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\r\n  digit: /[0-9]/,\r\n  digitseq0: /@digit*/,\r\n  xdigit: /[0-9A-Za-z]/,\r\n  xdigitseq0: /@xdigit*/,\r\n  INTSP: /[lLuU]/,\r\n  FLOATSP: /[fFlL]/,\r\n  fexponent: /[eE][+-]?[0-9]+/,\r\n  fexponent_bin: /[pP][+-]?[0-9]+/,\r\n  deciexp: /\\.[0-9]*@fexponent?/,\r\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\r\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\r\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\r\n  start: \"root\",\r\n  tokenizer: {\r\n    root: [\r\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\r\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\r\n      {\r\n        regex: /\\(\\*/,\r\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\r\n      },\r\n      {\r\n        regex: /\\(/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /\\)/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /\\[/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /\\]/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /\\{/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /\\}/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /,\\(/,\r\n        action: \"@brackets\"\r\n      },\r\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\r\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\r\n      {\r\n        regex: /@\\(/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /@\\[/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /@\\{/,\r\n        action: \"@brackets\"\r\n      },\r\n      {\r\n        regex: /:</,\r\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\r\n      },\r\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\r\n      {\r\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\r\n        action: { token: \"number.float\" }\r\n      },\r\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\r\n      {\r\n        regex: /\\$@IDENTFST@IDENTRST*/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\r\n            \"@default\": { token: \"namespace\" }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        regex: /\\#@IDENTFST@IDENTRST*/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords_srp\": { token: \"keyword.srp\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\r\n      {\r\n        regex: /^%{(#|\\^|\\$)?/,\r\n        action: {\r\n          token: \"keyword\",\r\n          next: \"@lexing_EXTCODE\",\r\n          nextEmbedded: \"text/javascript\"\r\n        }\r\n      },\r\n      { regex: /^%}/, action: { token: \"keyword\" } },\r\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\r\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\r\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\r\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\r\n      {\r\n        regex: /`\\(/,\r\n        action: \"@brackets\"\r\n      },\r\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\r\n      {\r\n        regex: /@irregular_keywords(?!@IDENTRST)/,\r\n        action: { token: \"keyword\" }\r\n      },\r\n      {\r\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword\" },\r\n            \"@keywords_types\": { token: \"type\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        regex: /\\/\\/\\/\\//,\r\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\r\n      },\r\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\r\n      {\r\n        regex: /\\/\\*/,\r\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\r\n      },\r\n      {\r\n        regex: /-<|=</,\r\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\r\n      },\r\n      {\r\n        regex: /@symbolic+/,\r\n        action: {\r\n          cases: {\r\n            \"@operators\": \"keyword\",\r\n            \"@default\": \"operator\"\r\n          }\r\n        }\r\n      },\r\n      {\r\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\r\n        action: { token: \"number.float\" }\r\n      },\r\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\r\n      {\r\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\r\n        action: { token: \"number.octal\" }\r\n      },\r\n      {\r\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\r\n        action: { token: \"number.float\" }\r\n      },\r\n      {\r\n        regex: /@digit@digitseq0@INTSP*/,\r\n        action: { token: \"number.decimal\" }\r\n      },\r\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\r\n    ],\r\n    lexing_COMMENT_block_ml: [\r\n      [/[^\\(\\*]+/, \"comment\"],\r\n      [/\\(\\*/, \"comment\", \"@push\"],\r\n      [/\\(\\*/, \"comment.invalid\"],\r\n      [/\\*\\)/, \"comment\", \"@pop\"],\r\n      [/\\*/, \"comment\"]\r\n    ],\r\n    lexing_COMMENT_block_c: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    lexing_COMMENT_rest: [\r\n      [/$/, \"comment\", \"@pop\"],\r\n      [/.*/, \"comment\"]\r\n    ],\r\n    lexing_EFFECT_commaseq0: [\r\n      {\r\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords_effects\": { token: \"type.effect\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      { regex: /,/, action: { token: \"punctuation\" } },\r\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\r\n    ],\r\n    lexing_EXTCODE: [\r\n      {\r\n        regex: /^%}/,\r\n        action: {\r\n          token: \"@rematch\",\r\n          next: \"@pop\",\r\n          nextEmbedded: \"@pop\"\r\n        }\r\n      },\r\n      { regex: /[^%]+/, action: \"\" }\r\n    ],\r\n    lexing_DQUOTE: [\r\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\r\n      {\r\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\r\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\r\n      },\r\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\r\n      {\r\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\r\n        action: { token: \"string.escape\" }\r\n      },\r\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
