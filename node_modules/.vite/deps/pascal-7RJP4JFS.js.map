{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/pascal/pascal.ts\r\nvar conf = {\r\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"{\", \"}\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"],\r\n    [\"<\", \">\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\" },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\" },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\r\n      end: new RegExp(\"^\\\\s*\\\\{\\\\$ENDREGION\\\\}\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".pascal\",\r\n  ignoreCase: true,\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  keywords: [\r\n    \"absolute\",\r\n    \"abstract\",\r\n    \"all\",\r\n    \"and_then\",\r\n    \"array\",\r\n    \"as\",\r\n    \"asm\",\r\n    \"attribute\",\r\n    \"begin\",\r\n    \"bindable\",\r\n    \"case\",\r\n    \"class\",\r\n    \"const\",\r\n    \"contains\",\r\n    \"default\",\r\n    \"div\",\r\n    \"else\",\r\n    \"end\",\r\n    \"except\",\r\n    \"exports\",\r\n    \"external\",\r\n    \"far\",\r\n    \"file\",\r\n    \"finalization\",\r\n    \"finally\",\r\n    \"forward\",\r\n    \"generic\",\r\n    \"goto\",\r\n    \"if\",\r\n    \"implements\",\r\n    \"import\",\r\n    \"in\",\r\n    \"index\",\r\n    \"inherited\",\r\n    \"initialization\",\r\n    \"interrupt\",\r\n    \"is\",\r\n    \"label\",\r\n    \"library\",\r\n    \"mod\",\r\n    \"module\",\r\n    \"name\",\r\n    \"near\",\r\n    \"not\",\r\n    \"object\",\r\n    \"of\",\r\n    \"on\",\r\n    \"only\",\r\n    \"operator\",\r\n    \"or_else\",\r\n    \"otherwise\",\r\n    \"override\",\r\n    \"package\",\r\n    \"packed\",\r\n    \"pow\",\r\n    \"private\",\r\n    \"program\",\r\n    \"protected\",\r\n    \"public\",\r\n    \"published\",\r\n    \"interface\",\r\n    \"implementation\",\r\n    \"qualified\",\r\n    \"read\",\r\n    \"record\",\r\n    \"resident\",\r\n    \"requires\",\r\n    \"resourcestring\",\r\n    \"restricted\",\r\n    \"segment\",\r\n    \"set\",\r\n    \"shl\",\r\n    \"shr\",\r\n    \"specialize\",\r\n    \"stored\",\r\n    \"strict\",\r\n    \"then\",\r\n    \"threadvar\",\r\n    \"to\",\r\n    \"try\",\r\n    \"type\",\r\n    \"unit\",\r\n    \"uses\",\r\n    \"var\",\r\n    \"view\",\r\n    \"virtual\",\r\n    \"dynamic\",\r\n    \"overload\",\r\n    \"reintroduce\",\r\n    \"with\",\r\n    \"write\",\r\n    \"xor\",\r\n    \"true\",\r\n    \"false\",\r\n    \"procedure\",\r\n    \"function\",\r\n    \"constructor\",\r\n    \"destructor\",\r\n    \"property\",\r\n    \"break\",\r\n    \"continue\",\r\n    \"exit\",\r\n    \"abort\",\r\n    \"while\",\r\n    \"do\",\r\n    \"for\",\r\n    \"raise\",\r\n    \"repeat\",\r\n    \"until\"\r\n  ],\r\n  typeKeywords: [\r\n    \"boolean\",\r\n    \"double\",\r\n    \"byte\",\r\n    \"integer\",\r\n    \"shortint\",\r\n    \"char\",\r\n    \"longint\",\r\n    \"float\",\r\n    \"string\"\r\n  ],\r\n  operators: [\r\n    \"=\",\r\n    \">\",\r\n    \"<\",\r\n    \"<=\",\r\n    \">=\",\r\n    \"<>\",\r\n    \":\",\r\n    \":=\",\r\n    \"and\",\r\n    \"or\",\r\n    \"+\",\r\n    \"-\",\r\n    \"*\",\r\n    \"/\",\r\n    \"@\",\r\n    \"&\",\r\n    \"^\",\r\n    \"%\"\r\n  ],\r\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n  tokenizer: {\r\n    root: [\r\n      [\r\n        /[a-zA-Z_][\\w]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"delimiter\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/\\$[0-9a-fA-F]{1,16}/, \"number.hex\"],\r\n      [/\\d+/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/'/, \"string\", \"@string\"],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      [/'/, \"string.invalid\"],\r\n      [/\\#\\d+/, \"string\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\*\\}]+/, \"comment\"],\r\n      [/\\}/, \"comment\", \"@pop\"],\r\n      [/[\\{]/, \"comment\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\']+/, \"string\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [/\\{/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
