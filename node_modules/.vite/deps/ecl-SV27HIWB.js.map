{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/ecl/ecl.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/ecl/ecl.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\" },\r\n    { open: \"'\", close: \"'\" },\r\n    { open: '\"', close: '\"' }\r\n  ]\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".ecl\",\r\n  ignoreCase: true,\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  pounds: [\r\n    \"append\",\r\n    \"break\",\r\n    \"declare\",\r\n    \"demangle\",\r\n    \"end\",\r\n    \"for\",\r\n    \"getdatatype\",\r\n    \"if\",\r\n    \"inmodule\",\r\n    \"loop\",\r\n    \"mangle\",\r\n    \"onwarning\",\r\n    \"option\",\r\n    \"set\",\r\n    \"stored\",\r\n    \"uniquename\"\r\n  ].join(\"|\"),\r\n  keywords: [\r\n    \"__compressed__\",\r\n    \"after\",\r\n    \"all\",\r\n    \"and\",\r\n    \"any\",\r\n    \"as\",\r\n    \"atmost\",\r\n    \"before\",\r\n    \"beginc\",\r\n    \"best\",\r\n    \"between\",\r\n    \"case\",\r\n    \"cluster\",\r\n    \"compressed\",\r\n    \"compression\",\r\n    \"const\",\r\n    \"counter\",\r\n    \"csv\",\r\n    \"default\",\r\n    \"descend\",\r\n    \"embed\",\r\n    \"encoding\",\r\n    \"encrypt\",\r\n    \"end\",\r\n    \"endc\",\r\n    \"endembed\",\r\n    \"endmacro\",\r\n    \"enum\",\r\n    \"escape\",\r\n    \"except\",\r\n    \"exclusive\",\r\n    \"expire\",\r\n    \"export\",\r\n    \"extend\",\r\n    \"fail\",\r\n    \"few\",\r\n    \"fileposition\",\r\n    \"first\",\r\n    \"flat\",\r\n    \"forward\",\r\n    \"from\",\r\n    \"full\",\r\n    \"function\",\r\n    \"functionmacro\",\r\n    \"group\",\r\n    \"grouped\",\r\n    \"heading\",\r\n    \"hole\",\r\n    \"ifblock\",\r\n    \"import\",\r\n    \"in\",\r\n    \"inner\",\r\n    \"interface\",\r\n    \"internal\",\r\n    \"joined\",\r\n    \"keep\",\r\n    \"keyed\",\r\n    \"last\",\r\n    \"left\",\r\n    \"limit\",\r\n    \"linkcounted\",\r\n    \"literal\",\r\n    \"little_endian\",\r\n    \"load\",\r\n    \"local\",\r\n    \"locale\",\r\n    \"lookup\",\r\n    \"lzw\",\r\n    \"macro\",\r\n    \"many\",\r\n    \"maxcount\",\r\n    \"maxlength\",\r\n    \"min skew\",\r\n    \"module\",\r\n    \"mofn\",\r\n    \"multiple\",\r\n    \"named\",\r\n    \"namespace\",\r\n    \"nocase\",\r\n    \"noroot\",\r\n    \"noscan\",\r\n    \"nosort\",\r\n    \"not\",\r\n    \"noxpath\",\r\n    \"of\",\r\n    \"onfail\",\r\n    \"only\",\r\n    \"opt\",\r\n    \"or\",\r\n    \"outer\",\r\n    \"overwrite\",\r\n    \"packed\",\r\n    \"partition\",\r\n    \"penalty\",\r\n    \"physicallength\",\r\n    \"pipe\",\r\n    \"prefetch\",\r\n    \"quote\",\r\n    \"record\",\r\n    \"repeat\",\r\n    \"retry\",\r\n    \"return\",\r\n    \"right\",\r\n    \"right1\",\r\n    \"right2\",\r\n    \"rows\",\r\n    \"rowset\",\r\n    \"scan\",\r\n    \"scope\",\r\n    \"self\",\r\n    \"separator\",\r\n    \"service\",\r\n    \"shared\",\r\n    \"skew\",\r\n    \"skip\",\r\n    \"smart\",\r\n    \"soapaction\",\r\n    \"sql\",\r\n    \"stable\",\r\n    \"store\",\r\n    \"terminator\",\r\n    \"thor\",\r\n    \"threshold\",\r\n    \"timelimit\",\r\n    \"timeout\",\r\n    \"token\",\r\n    \"transform\",\r\n    \"trim\",\r\n    \"type\",\r\n    \"unicodeorder\",\r\n    \"unordered\",\r\n    \"unsorted\",\r\n    \"unstable\",\r\n    \"update\",\r\n    \"use\",\r\n    \"validate\",\r\n    \"virtual\",\r\n    \"whole\",\r\n    \"width\",\r\n    \"wild\",\r\n    \"within\",\r\n    \"wnotrim\",\r\n    \"xml\",\r\n    \"xpath\"\r\n  ],\r\n  functions: [\r\n    \"abs\",\r\n    \"acos\",\r\n    \"aggregate\",\r\n    \"allnodes\",\r\n    \"apply\",\r\n    \"ascii\",\r\n    \"asin\",\r\n    \"assert\",\r\n    \"asstring\",\r\n    \"atan\",\r\n    \"atan2\",\r\n    \"ave\",\r\n    \"build\",\r\n    \"buildindex\",\r\n    \"case\",\r\n    \"catch\",\r\n    \"choose\",\r\n    \"choosen\",\r\n    \"choosesets\",\r\n    \"clustersize\",\r\n    \"combine\",\r\n    \"correlation\",\r\n    \"cos\",\r\n    \"cosh\",\r\n    \"count\",\r\n    \"covariance\",\r\n    \"cron\",\r\n    \"dataset\",\r\n    \"dedup\",\r\n    \"define\",\r\n    \"denormalize\",\r\n    \"dictionary\",\r\n    \"distribute\",\r\n    \"distributed\",\r\n    \"distribution\",\r\n    \"ebcdic\",\r\n    \"enth\",\r\n    \"error\",\r\n    \"evaluate\",\r\n    \"event\",\r\n    \"eventextra\",\r\n    \"eventname\",\r\n    \"exists\",\r\n    \"exp\",\r\n    \"fail\",\r\n    \"failcode\",\r\n    \"failmessage\",\r\n    \"fetch\",\r\n    \"fromunicode\",\r\n    \"fromxml\",\r\n    \"getenv\",\r\n    \"getisvalid\",\r\n    \"global\",\r\n    \"graph\",\r\n    \"group\",\r\n    \"hash\",\r\n    \"hash32\",\r\n    \"hash64\",\r\n    \"hashcrc\",\r\n    \"hashmd5\",\r\n    \"having\",\r\n    \"httpcall\",\r\n    \"httpheader\",\r\n    \"if\",\r\n    \"iff\",\r\n    \"index\",\r\n    \"intformat\",\r\n    \"isvalid\",\r\n    \"iterate\",\r\n    \"join\",\r\n    \"keydiff\",\r\n    \"keypatch\",\r\n    \"keyunicode\",\r\n    \"length\",\r\n    \"library\",\r\n    \"limit\",\r\n    \"ln\",\r\n    \"loadxml\",\r\n    \"local\",\r\n    \"log\",\r\n    \"loop\",\r\n    \"map\",\r\n    \"matched\",\r\n    \"matchlength\",\r\n    \"matchposition\",\r\n    \"matchtext\",\r\n    \"matchunicode\",\r\n    \"max\",\r\n    \"merge\",\r\n    \"mergejoin\",\r\n    \"min\",\r\n    \"nofold\",\r\n    \"nolocal\",\r\n    \"nonempty\",\r\n    \"normalize\",\r\n    \"nothor\",\r\n    \"notify\",\r\n    \"output\",\r\n    \"parallel\",\r\n    \"parse\",\r\n    \"pipe\",\r\n    \"power\",\r\n    \"preload\",\r\n    \"process\",\r\n    \"project\",\r\n    \"pull\",\r\n    \"random\",\r\n    \"range\",\r\n    \"rank\",\r\n    \"ranked\",\r\n    \"realformat\",\r\n    \"recordof\",\r\n    \"regexfind\",\r\n    \"regexreplace\",\r\n    \"regroup\",\r\n    \"rejected\",\r\n    \"rollup\",\r\n    \"round\",\r\n    \"roundup\",\r\n    \"row\",\r\n    \"rowdiff\",\r\n    \"sample\",\r\n    \"sequential\",\r\n    \"set\",\r\n    \"sin\",\r\n    \"sinh\",\r\n    \"sizeof\",\r\n    \"soapcall\",\r\n    \"sort\",\r\n    \"sorted\",\r\n    \"sqrt\",\r\n    \"stepped\",\r\n    \"stored\",\r\n    \"sum\",\r\n    \"table\",\r\n    \"tan\",\r\n    \"tanh\",\r\n    \"thisnode\",\r\n    \"topn\",\r\n    \"tounicode\",\r\n    \"toxml\",\r\n    \"transfer\",\r\n    \"transform\",\r\n    \"trim\",\r\n    \"truncate\",\r\n    \"typeof\",\r\n    \"ungroup\",\r\n    \"unicodeorder\",\r\n    \"variance\",\r\n    \"wait\",\r\n    \"which\",\r\n    \"workunit\",\r\n    \"xmldecode\",\r\n    \"xmlencode\",\r\n    \"xmltext\",\r\n    \"xmlunicode\"\r\n  ],\r\n  typesint: [\"integer\", \"unsigned\"].join(\"|\"),\r\n  typesnum: [\"data\", \"qstring\", \"string\", \"unicode\", \"utf8\", \"varstring\", \"varunicode\"],\r\n  typesone: [\r\n    \"ascii\",\r\n    \"big_endian\",\r\n    \"boolean\",\r\n    \"data\",\r\n    \"decimal\",\r\n    \"ebcdic\",\r\n    \"grouped\",\r\n    \"integer\",\r\n    \"linkcounted\",\r\n    \"pattern\",\r\n    \"qstring\",\r\n    \"real\",\r\n    \"record\",\r\n    \"rule\",\r\n    \"set of\",\r\n    \"streamed\",\r\n    \"string\",\r\n    \"token\",\r\n    \"udecimal\",\r\n    \"unicode\",\r\n    \"unsigned\",\r\n    \"utf8\",\r\n    \"varstring\",\r\n    \"varunicode\"\r\n  ].join(\"|\"),\r\n  operators: [\"+\", \"-\", \"/\", \":=\", \"<\", \"<>\", \"=\", \">\", \"\\\\\", \"and\", \"in\", \"not\", \"or\"],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  tokenizer: {\r\n    root: [\r\n      [/@typesint[4|8]/, \"type\"],\r\n      [/#(@pounds)/, \"type\"],\r\n      [/@typesone/, \"type\"],\r\n      [\r\n        /[a-zA-Z_$][\\w-$]*/,\r\n        {\r\n          cases: {\r\n            \"@functions\": \"keyword.function\",\r\n            \"@keywords\": \"keyword\",\r\n            \"@operators\": \"operator\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"delimiter\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\r\n      [/0[bB][01]+/, \"number.hex\"],\r\n      [/[0-9_]+/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/\"/, \"string\", \"@string\"],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\r\n      [/'/, \"string.invalid\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\']+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/'/, \"string\", \"@pop\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": ";;;AAQA,IAAI,OAAO;AAAA,EACT,UAAU;AAAA,IACR,aAAa;AAAA,IACb,cAAc,CAAC,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,UAAU;AAAA,IACR,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,EACX;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,CAAC,UAAU,SAAS,EAAE;AAAA,IACtD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,CAAC,UAAU,SAAS,EAAE;AAAA,EACxD;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC1B;AACF;AACA,IAAI,WAAW;AAAA,EACb,cAAc;AAAA,EACd,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,UAAU;AAAA,IACR,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,kBAAkB;AAAA,IAClD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,mBAAmB;AAAA,IACnD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,wBAAwB;AAAA,IACxD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,kBAAkB;AAAA,EACpD;AAAA,EACA,QAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,EAAE,KAAK,GAAG;AAAA,EACV,UAAU;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IA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",
  "names": []
}
