{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\r\n\r\n// src/fillers/monaco-editor-core.ts\r\nvar monaco_editor_core_exports = {};\r\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\r\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\r\n\r\n// src/basic-languages/freemarker2/freemarker2.ts\r\nvar EMPTY_ELEMENTS = [\r\n  \"assign\",\r\n  \"flush\",\r\n  \"ftl\",\r\n  \"return\",\r\n  \"global\",\r\n  \"import\",\r\n  \"include\",\r\n  \"break\",\r\n  \"continue\",\r\n  \"local\",\r\n  \"nested\",\r\n  \"nt\",\r\n  \"setting\",\r\n  \"stop\",\r\n  \"t\",\r\n  \"lt\",\r\n  \"rt\",\r\n  \"fallback\"\r\n];\r\nvar BLOCK_ELEMENTS = [\r\n  \"attempt\",\r\n  \"autoesc\",\r\n  \"autoEsc\",\r\n  \"compress\",\r\n  \"comment\",\r\n  \"escape\",\r\n  \"noescape\",\r\n  \"function\",\r\n  \"if\",\r\n  \"list\",\r\n  \"items\",\r\n  \"sep\",\r\n  \"macro\",\r\n  \"noparse\",\r\n  \"noParse\",\r\n  \"noautoesc\",\r\n  \"noAutoEsc\",\r\n  \"outputformat\",\r\n  \"switch\",\r\n  \"visit\",\r\n  \"recurse\"\r\n];\r\nvar TagSyntaxAngle = {\r\n  close: \">\",\r\n  id: \"angle\",\r\n  open: \"<\"\r\n};\r\nvar TagSyntaxBracket = {\r\n  close: \"\\\\]\",\r\n  id: \"bracket\",\r\n  open: \"\\\\[\"\r\n};\r\nvar TagSyntaxAuto = {\r\n  close: \"[>\\\\]]\",\r\n  id: \"auto\",\r\n  open: \"[<\\\\[]\"\r\n};\r\nvar InterpolationSyntaxDollar = {\r\n  close: \"\\\\}\",\r\n  id: \"dollar\",\r\n  open1: \"\\\\$\",\r\n  open2: \"\\\\{\"\r\n};\r\nvar InterpolationSyntaxBracket = {\r\n  close: \"\\\\]\",\r\n  id: \"bracket\",\r\n  open1: \"\\\\[\",\r\n  open2: \"=\"\r\n};\r\nfunction createLangConfiguration(ts) {\r\n  return {\r\n    brackets: [\r\n      [\"<\", \">\"],\r\n      [\"[\", \"]\"],\r\n      [\"(\", \")\"],\r\n      [\"{\", \"}\"]\r\n    ],\r\n    comments: {\r\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\r\n    },\r\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\r\n    autoClosingPairs: [\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: '\"', close: '\"', notIn: [\"string\"] },\r\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\r\n    ],\r\n    surroundingPairs: [\r\n      { open: '\"', close: '\"' },\r\n      { open: \"'\", close: \"'\" },\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: \"<\", close: \">\" }\r\n    ],\r\n    folding: {\r\n      markers: {\r\n        start: new RegExp(`${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\r\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\r\n      }\r\n    },\r\n    onEnterRules: [\r\n      {\r\n        beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\r\n        afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\r\n        action: {\r\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\r\n        }\r\n      },\r\n      {\r\n        beforeText: new RegExp(`${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`),\r\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\r\n      }\r\n    ]\r\n  };\r\n}\r\nfunction createLangConfigurationAuto() {\r\n  return {\r\n    brackets: [\r\n      [\"<\", \">\"],\r\n      [\"[\", \"]\"],\r\n      [\"(\", \")\"],\r\n      [\"{\", \"}\"]\r\n    ],\r\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\r\n    autoClosingPairs: [\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: '\"', close: '\"', notIn: [\"string\"] },\r\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\r\n    ],\r\n    surroundingPairs: [\r\n      { open: '\"', close: '\"' },\r\n      { open: \"'\", close: \"'\" },\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: \"<\", close: \">\" }\r\n    ],\r\n    folding: {\r\n      markers: {\r\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\r\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\r\n      }\r\n    },\r\n    onEnterRules: [\r\n      {\r\n        beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\r\n        afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\r\n        action: {\r\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\r\n        }\r\n      },\r\n      {\r\n        beforeText: new RegExp(`[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`),\r\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\r\n      }\r\n    ]\r\n  };\r\n}\r\nfunction createMonarchLanguage(ts, is) {\r\n  const id = `_${ts.id}_${is.id}`;\r\n  const s = (name) => name.replace(/__id__/g, id);\r\n  const r = (regexp) => {\r\n    const source = regexp.source.replace(/__id__/g, id);\r\n    return new RegExp(source, regexp.flags);\r\n  };\r\n  return {\r\n    unicode: true,\r\n    includeLF: false,\r\n    start: s(\"default__id__\"),\r\n    ignoreCase: false,\r\n    defaultToken: \"invalid\",\r\n    tokenPostfix: `.freemarker2`,\r\n    brackets: [\r\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n    ],\r\n    [s(\"open__id__\")]: new RegExp(ts.open),\r\n    [s(\"close__id__\")]: new RegExp(ts.close),\r\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\r\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\r\n    [s(\"iClose__id__\")]: new RegExp(is.close),\r\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\r\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\r\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\r\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\r\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\r\n    blank: /[ \\t\\n\\r]/,\r\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\r\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\r\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\r\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\r\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\r\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\r\n    asciiDigit: /[0-9]/,\r\n    integer: /[0-9]+/,\r\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\r\n    escapedIdChar: /\\\\[\\-\\.:#]/,\r\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\r\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\r\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\r\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\r\n    arrows: [\"->\", \"-&gt;\"],\r\n    delimiters: [\";\", \":\", \",\", \".\"],\r\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\r\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\r\n    tokenizer: {\r\n      [s(\"default__id__\")]: [\r\n        { include: s(\"@directive_token__id__\") },\r\n        { include: s(\"@interpolation_and_text_token__id__\") }\r\n      ],\r\n      [s(\"fmExpression__id__.directive\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@directive_end_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") }\r\n      ],\r\n      [s(\"fmExpression__id__.interpolation\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") },\r\n        { include: s(\"@greater_operators_token__id__\") }\r\n      ],\r\n      [s(\"inParen__id__.plain\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@directive_end_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") }\r\n      ],\r\n      [s(\"inParen__id__.gt\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") },\r\n        { include: s(\"@greater_operators_token__id__\") }\r\n      ],\r\n      [s(\"noSpaceExpression__id__\")]: [\r\n        { include: s(\"@no_space_expression_end_token__id__\") },\r\n        { include: s(\"@directive_end_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") }\r\n      ],\r\n      [s(\"unifiedCall__id__\")]: [{ include: s(\"@unified_call_token__id__\") }],\r\n      [s(\"singleString__id__\")]: [{ include: s(\"@string_single_token__id__\") }],\r\n      [s(\"doubleString__id__\")]: [{ include: s(\"@string_double_token__id__\") }],\r\n      [s(\"rawSingleString__id__\")]: [{ include: s(\"@string_single_raw_token__id__\") }],\r\n      [s(\"rawDoubleString__id__\")]: [{ include: s(\"@string_double_raw_token__id__\") }],\r\n      [s(\"expressionComment__id__\")]: [{ include: s(\"@expression_comment_token__id__\") }],\r\n      [s(\"noParse__id__\")]: [{ include: s(\"@no_parse_token__id__\") }],\r\n      [s(\"terseComment__id__\")]: [{ include: s(\"@terse_comment_token__id__\") }],\r\n      [s(\"directive_token__id__\")]: [\r\n        [\r\n          r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            {\r\n              cases: {\r\n                \"@noParseTags\": { token: \"tag\", next: s(\"@noParse__id__.$3\") },\r\n                \"@default\": { token: \"tag\" }\r\n              }\r\n            },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        [\r\n          r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        [\r\n          r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"\", next: s(\"@fmExpression__id__.directive\") }\r\n          ]\r\n        ],\r\n        [\r\n          r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        [\r\n          r(/(@open__id__)(@)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\", next: s(\"@unifiedCall__id__\") }\r\n          ]\r\n        ],\r\n        [\r\n          r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/),\r\n          [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        [\r\n          r(/(@open__id__)#--/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : { token: \"comment\", next: s(\"@terseComment__id__\") }\r\n        ],\r\n        [\r\n          r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag.invalid\", next: s(\"@fmExpression__id__.directive\") }\r\n          ]\r\n        ]\r\n      ],\r\n      [s(\"interpolation_and_text_token__id__\")]: [\r\n        [\r\n          r(/(@iOpen1__id__)(@iOpen2__id__)/),\r\n          [\r\n            { token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\" },\r\n            {\r\n              token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\r\n              next: s(\"@fmExpression__id__.interpolation\")\r\n            }\r\n          ]\r\n        ],\r\n        [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, { token: \"source\" }]\r\n      ],\r\n      [s(\"string_single_token__id__\")]: [\r\n        [/[^'\\\\]/, { token: \"string\" }],\r\n        [/@escapedChar/, { token: \"string.escape\" }],\r\n        [/'/, { token: \"string\", next: \"@pop\" }]\r\n      ],\r\n      [s(\"string_double_token__id__\")]: [\r\n        [/[^\"\\\\]/, { token: \"string\" }],\r\n        [/@escapedChar/, { token: \"string.escape\" }],\r\n        [/\"/, { token: \"string\", next: \"@pop\" }]\r\n      ],\r\n      [s(\"string_single_raw_token__id__\")]: [\r\n        [/[^']+/, { token: \"string.raw\" }],\r\n        [/'/, { token: \"string.raw\", next: \"@pop\" }]\r\n      ],\r\n      [s(\"string_double_raw_token__id__\")]: [\r\n        [/[^\"]+/, { token: \"string.raw\" }],\r\n        [/\"/, { token: \"string.raw\", next: \"@pop\" }]\r\n      ],\r\n      [s(\"expression_token__id__\")]: [\r\n        [\r\n          /(r?)(['\"])/,\r\n          {\r\n            cases: {\r\n              \"r'\": [\r\n                { token: \"keyword\" },\r\n                { token: \"string.raw\", next: s(\"@rawSingleString__id__\") }\r\n              ],\r\n              'r\"': [\r\n                { token: \"keyword\" },\r\n                { token: \"string.raw\", next: s(\"@rawDoubleString__id__\") }\r\n              ],\r\n              \"'\": [{ token: \"source\" }, { token: \"string\", next: s(\"@singleString__id__\") }],\r\n              '\"': [{ token: \"source\" }, { token: \"string\", next: s(\"@doubleString__id__\") }]\r\n            }\r\n          }\r\n        ],\r\n        [\r\n          /(?:@integer)(?:\\.(?:@integer))?/,\r\n          {\r\n            cases: {\r\n              \"(?:@integer)\": { token: \"number\" },\r\n              \"@default\": { token: \"number.float\" }\r\n            }\r\n          }\r\n        ],\r\n        [\r\n          /(\\.)(@blank*)(@specialHashKeys)/,\r\n          [{ token: \"delimiter\" }, { token: \"\" }, { token: \"identifier\" }]\r\n        ],\r\n        [\r\n          /(?:@namedSymbols)/,\r\n          {\r\n            cases: {\r\n              \"@arrows\": { token: \"meta.arrow\" },\r\n              \"@delimiters\": { token: \"delimiter\" },\r\n              \"@default\": { token: \"operators\" }\r\n            }\r\n          }\r\n        ],\r\n        [\r\n          /@id/,\r\n          {\r\n            cases: {\r\n              \"@keywords\": { token: \"keyword.$0\" },\r\n              \"@stringOperators\": { token: \"operators\" },\r\n              \"@default\": { token: \"identifier\" }\r\n            }\r\n          }\r\n        ],\r\n        [\r\n          /[\\[\\]\\(\\)\\{\\}]/,\r\n          {\r\n            cases: {\r\n              \"\\\\[\": {\r\n                cases: {\r\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\r\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\r\n                }\r\n              },\r\n              \"\\\\]\": {\r\n                cases: {\r\n                  ...is.id === \"bracket\" ? {\r\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\r\n                  } : {},\r\n                  ...ts.id === \"bracket\" ? {\r\n                    \"$S2==directive\": { token: \"@brackets.directive\", next: \"@popall\" }\r\n                  } : {},\r\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\r\n                  \"@default\": { token: \"@brackets\" }\r\n                }\r\n              },\r\n              \"\\\\(\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\r\n              \"\\\\)\": {\r\n                cases: {\r\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\r\n                  \"@default\": { token: \"@brackets\" }\r\n                }\r\n              },\r\n              \"\\\\{\": {\r\n                cases: {\r\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\r\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\r\n                }\r\n              },\r\n              \"\\\\}\": {\r\n                cases: {\r\n                  ...is.id === \"bracket\" ? {} : {\r\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\r\n                  },\r\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\r\n                  \"@default\": { token: \"@brackets\" }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        [/\\$\\{/, { token: \"delimiter.invalid\" }]\r\n      ],\r\n      [s(\"blank_and_expression_comment_token__id__\")]: [\r\n        [/(?:@blank)+/, { token: \"\" }],\r\n        [/[<\\[][#!]--/, { token: \"comment\", next: s(\"@expressionComment__id__\") }]\r\n      ],\r\n      [s(\"directive_end_token__id__\")]: [\r\n        [\r\n          />/,\r\n          ts.id === \"bracket\" ? { token: \"operators\" } : { token: \"@brackets.directive\", next: \"@popall\" }\r\n        ],\r\n        [\r\n          r(/(\\/)(@close__id__)/),\r\n          [{ token: \"delimiter.directive\" }, { token: \"@brackets.directive\", next: \"@popall\" }]\r\n        ]\r\n      ],\r\n      [s(\"greater_operators_token__id__\")]: [\r\n        [/>/, { token: \"operators\" }],\r\n        [/>=/, { token: \"operators\" }]\r\n      ],\r\n      [s(\"no_space_expression_end_token__id__\")]: [\r\n        [/(?:@blank)+/, { token: \"\", switchTo: s(\"@fmExpression__id__.directive\") }]\r\n      ],\r\n      [s(\"unified_call_token__id__\")]: [\r\n        [\r\n          /(@id)((?:@blank)+)/,\r\n          [{ token: \"tag\" }, { token: \"\", next: s(\"@fmExpression__id__.directive\") }]\r\n        ],\r\n        [\r\n          r(/(@id)(\\/?)(@close__id__)/),\r\n          [\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\", next: \"@popall\" }\r\n          ]\r\n        ],\r\n        [/./, { token: \"@rematch\", next: s(\"@noSpaceExpression__id__\") }]\r\n      ],\r\n      [s(\"no_parse_token__id__\")]: [\r\n        [\r\n          r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/),\r\n          {\r\n            cases: {\r\n              \"$S2==$3\": [\r\n                { token: \"@brackets.directive\" },\r\n                { token: \"delimiter.directive\" },\r\n                { token: \"tag\" },\r\n                { token: \"\" },\r\n                { token: \"@brackets.directive\", next: \"@popall\" }\r\n              ],\r\n              \"$S2==comment\": [\r\n                { token: \"comment\" },\r\n                { token: \"comment\" },\r\n                { token: \"comment\" },\r\n                { token: \"comment\" },\r\n                { token: \"comment\" }\r\n              ],\r\n              \"@default\": [\r\n                { token: \"source\" },\r\n                { token: \"source\" },\r\n                { token: \"source\" },\r\n                { token: \"source\" },\r\n                { token: \"source\" }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        [\r\n          /[^<\\[\\-]+|[<\\[\\-]/,\r\n          {\r\n            cases: {\r\n              \"$S2==comment\": { token: \"comment\" },\r\n              \"@default\": { token: \"source\" }\r\n            }\r\n          }\r\n        ]\r\n      ],\r\n      [s(\"expression_comment_token__id__\")]: [\r\n        [\r\n          /--[>\\]]/,\r\n          {\r\n            token: \"comment\",\r\n            next: \"@pop\"\r\n          }\r\n        ],\r\n        [/[^\\->\\]]+|[>\\]\\-]/, { token: \"comment\" }]\r\n      ],\r\n      [s(\"terse_comment_token__id__\")]: [\r\n        [r(/--(?:@close__id__)/), { token: \"comment\", next: \"@popall\" }],\r\n        [/[^<\\[\\-]+|[<\\[\\-]/, { token: \"comment\" }]\r\n      ]\r\n    }\r\n  };\r\n}\r\nfunction createMonarchLanguageAuto(is) {\r\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\r\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\r\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\r\n  return {\r\n    ...angle,\r\n    ...bracket,\r\n    ...auto,\r\n    unicode: true,\r\n    includeLF: false,\r\n    start: `default_auto_${is.id}`,\r\n    ignoreCase: false,\r\n    defaultToken: \"invalid\",\r\n    tokenPostfix: `.freemarker2`,\r\n    brackets: [\r\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n    ],\r\n    tokenizer: {\r\n      ...angle.tokenizer,\r\n      ...bracket.tokenizer,\r\n      ...auto.tokenizer\r\n    }\r\n  };\r\n}\r\nvar TagAngleInterpolationDollar = {\r\n  conf: createLangConfiguration(TagSyntaxAngle),\r\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\r\n};\r\nvar TagBracketInterpolationDollar = {\r\n  conf: createLangConfiguration(TagSyntaxBracket),\r\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\r\n};\r\nvar TagAngleInterpolationBracket = {\r\n  conf: createLangConfiguration(TagSyntaxAngle),\r\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\r\n};\r\nvar TagBracketInterpolationBracket = {\r\n  conf: createLangConfiguration(TagSyntaxBracket),\r\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\r\n};\r\nvar TagAutoInterpolationDollar = {\r\n  conf: createLangConfigurationAuto(),\r\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\r\n};\r\nvar TagAutoInterpolationBracket = {\r\n  conf: createLangConfigurationAuto(),\r\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\r\n};\r\nexport {\r\n  TagAngleInterpolationBracket,\r\n  TagAngleInterpolationDollar,\r\n  TagAutoInterpolationBracket,\r\n  TagAutoInterpolationDollar,\r\n  TagBracketInterpolationBracket,\r\n  TagBracketInterpolationDollar\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
