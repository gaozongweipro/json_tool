{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/protobuf/protobuf.ts\r\nvar namedLiterals = [\"true\", \"false\"];\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"],\r\n    [\"<\", \">\"]\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\" },\r\n    { open: '\"', close: '\"', notIn: [\"string\"] },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\"] }\r\n  ],\r\n  autoCloseBefore: \".,=}])>' \\n\t\",\r\n  indentationRules: {\r\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\r\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".proto\",\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n  keywords: [\r\n    \"syntax\",\r\n    \"import\",\r\n    \"weak\",\r\n    \"public\",\r\n    \"package\",\r\n    \"option\",\r\n    \"repeated\",\r\n    \"oneof\",\r\n    \"map\",\r\n    \"reserved\",\r\n    \"to\",\r\n    \"max\",\r\n    \"enum\",\r\n    \"message\",\r\n    \"service\",\r\n    \"rpc\",\r\n    \"stream\",\r\n    \"returns\",\r\n    \"package\",\r\n    \"optional\",\r\n    \"true\",\r\n    \"false\"\r\n  ],\r\n  builtinTypes: [\r\n    \"double\",\r\n    \"float\",\r\n    \"int32\",\r\n    \"int64\",\r\n    \"uint32\",\r\n    \"uint64\",\r\n    \"sint32\",\r\n    \"sint64\",\r\n    \"fixed32\",\r\n    \"fixed64\",\r\n    \"sfixed32\",\r\n    \"sfixed64\",\r\n    \"bool\",\r\n    \"string\",\r\n    \"bytes\"\r\n  ],\r\n  operators: [\"=\", \"+\", \"-\"],\r\n  namedLiterals,\r\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\r\n  identifier: /[a-zA-Z]\\w*/,\r\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\r\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\r\n  messageName: /@identifier/,\r\n  enumName: /@identifier/,\r\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\r\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\r\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\r\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\r\n  boolLit: /true\\b|false\\b/,\r\n  decimalLit: /[1-9][0-9]*/,\r\n  octalLit: /0[0-7]*/,\r\n  hexLit: /0[xX][0-9a-fA-F]+/,\r\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\r\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\r\n  tokenizer: {\r\n    root: [\r\n      { include: \"@whitespace\" },\r\n      [/syntax/, \"keyword\"],\r\n      [/=/, \"operators\"],\r\n      [/;/, \"delimiter\"],\r\n      [\r\n        /(\")(proto3)(\")/,\r\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto3\" }]\r\n      ],\r\n      [\r\n        /(\")(proto2)(\")/,\r\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto2\" }]\r\n      ],\r\n      [\r\n        /.*?/,\r\n        { token: \"\", switchTo: \"@topLevel.proto2\" }\r\n      ]\r\n    ],\r\n    topLevel: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/=/, \"operators\"],\r\n      [/[;.]/, \"delimiter\"],\r\n      [\r\n        /@fullIdentifier/,\r\n        {\r\n          cases: {\r\n            option: { token: \"keyword\", next: \"@option.$S2\" },\r\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\r\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\r\n            service: { token: \"keyword\", next: \"@serviceDecl.$S2\" },\r\n            extend: {\r\n              cases: {\r\n                \"$S2==proto2\": { token: \"keyword\", next: \"@extendDecl.$S2\" }\r\n              }\r\n            },\r\n            \"@keywords\": \"keyword\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    enumDecl: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"type.identifier\"],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@enumBody.$S2\" }]\r\n    ],\r\n    enumBody: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/=/, \"operators\"],\r\n      [/;/, \"delimiter\"],\r\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\r\n      [/@identifier/, \"identifier\"],\r\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    messageDecl: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"type.identifier\"],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }]\r\n    ],\r\n    messageBody: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/=/, \"operators\"],\r\n      [/;/, \"delimiter\"],\r\n      [\r\n        \"(map)(s*)(<)\",\r\n        [\"keyword\", \"white\", { token: \"@brackets\", bracket: \"@open\", next: \"@map.$S2\" }]\r\n      ],\r\n      [\r\n        /@identifier/,\r\n        {\r\n          cases: {\r\n            option: { token: \"keyword\", next: \"@option.$S2\" },\r\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\r\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\r\n            oneof: { token: \"keyword\", next: \"@oneofDecl.$S2\" },\r\n            extensions: {\r\n              cases: {\r\n                \"$S2==proto2\": { token: \"keyword\", next: \"@reserved.$S2\" }\r\n              }\r\n            },\r\n            reserved: { token: \"keyword\", next: \"@reserved.$S2\" },\r\n            \"(?:repeated|optional)\": { token: \"keyword\", next: \"@field.$S2\" },\r\n            required: {\r\n              cases: {\r\n                \"$S2==proto2\": { token: \"keyword\", next: \"@field.$S2\" }\r\n              }\r\n            },\r\n            \"$S2==proto3\": { token: \"@rematch\", next: \"@field.$S2\" }\r\n          }\r\n        }\r\n      ],\r\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    extendDecl: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"type.identifier\"],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@extendBody.$S2\" }]\r\n    ],\r\n    extendBody: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/;/, \"delimiter\"],\r\n      [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"],\r\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    options: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/;/, \"delimiter\"],\r\n      [/@optionName/, \"annotation\"],\r\n      [/[()]/, \"annotation.brackets\"],\r\n      [/=/, \"operator\"],\r\n      [/\\]/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    option: [\r\n      { include: \"@whitespace\" },\r\n      [/@optionName/, \"annotation\"],\r\n      [/[()]/, \"annotation.brackets\"],\r\n      [/=/, \"operator\", \"@pop\"]\r\n    ],\r\n    oneofDecl: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"identifier\"],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@oneofBody.$S2\" }]\r\n    ],\r\n    oneofBody: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/;/, \"delimiter\"],\r\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]],\r\n      [\r\n        /@fullIdentifier|\\./,\r\n        {\r\n          cases: {\r\n            \"@builtinTypes\": \"keyword\",\r\n            \"@default\": \"type.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    reserved: [\r\n      { include: \"@whitespace\" },\r\n      [/,/, \"delimiter\"],\r\n      [/;/, \"delimiter\", \"@pop\"],\r\n      { include: \"@constant\" },\r\n      [/to\\b|max\\b/, \"keyword\"]\r\n    ],\r\n    map: [\r\n      { include: \"@whitespace\" },\r\n      [\r\n        /@fullIdentifier|\\./,\r\n        {\r\n          cases: {\r\n            \"@builtinTypes\": \"keyword\",\r\n            \"@default\": \"type.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/,/, \"delimiter\"],\r\n      [/>/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"identifier\" }]\r\n    ],\r\n    field: [\r\n      { include: \"@whitespace\" },\r\n      [\r\n        \"group\",\r\n        {\r\n          cases: {\r\n            \"$S2==proto2\": { token: \"keyword\", switchTo: \"@groupDecl.$S2\" }\r\n          }\r\n        }\r\n      ],\r\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", { token: \"delimiter\", next: \"@pop\" }]],\r\n      [\r\n        /@fullIdentifier|\\./,\r\n        {\r\n          cases: {\r\n            \"@builtinTypes\": \"keyword\",\r\n            \"@default\": \"type.identifier\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    groupDecl: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"identifier\"],\r\n      [\"=\", \"operator\"],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }],\r\n      { include: \"@constant\" }\r\n    ],\r\n    type: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"type.identifier\", \"@pop\"],\r\n      [/./, \"delimiter\"]\r\n    ],\r\n    identifier: [{ include: \"@whitespace\" }, [/@identifier/, \"identifier\", \"@pop\"]],\r\n    serviceDecl: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"identifier\"],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@serviceBody.$S2\" }]\r\n    ],\r\n    serviceBody: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/;/, \"delimiter\"],\r\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\r\n      [/rpc\\b/, \"keyword\", \"@rpc.$S2\"],\r\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    rpc: [\r\n      { include: \"@whitespace\" },\r\n      [/@identifier/, \"identifier\"],\r\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@request.$S2\" }],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@methodOptions.$S2\" }],\r\n      [/;/, \"delimiter\", \"@pop\"]\r\n    ],\r\n    request: [\r\n      { include: \"@whitespace\" },\r\n      [\r\n        /@messageType/,\r\n        {\r\n          cases: {\r\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\r\n            \"@default\": \"type.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@returns.$S2\" }]\r\n    ],\r\n    returns: [\r\n      { include: \"@whitespace\" },\r\n      [/returns\\b/, \"keyword\"],\r\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@response.$S2\" }]\r\n    ],\r\n    response: [\r\n      { include: \"@whitespace\" },\r\n      [\r\n        /@messageType/,\r\n        {\r\n          cases: {\r\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\r\n            \"@default\": \"type.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@rpc.$S2\" }]\r\n    ],\r\n    methodOptions: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/;/, \"delimiter\"],\r\n      [\"option\", \"keyword\"],\r\n      [/@optionName/, \"annotation\"],\r\n      [/[()]/, \"annotation.brackets\"],\r\n      [/=/, \"operator\"],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\/\\*/, \"comment\", \"@push\"],\r\n      [\"\\\\*/\", \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    stringSingle: [\r\n      [/[^\\\\']+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    constant: [\r\n      [\"@boolLit\", \"keyword.constant\"],\r\n      [\"@hexLit\", \"number.hex\"],\r\n      [\"@octalLit\", \"number.octal\"],\r\n      [\"@decimalLit\", \"number\"],\r\n      [\"@floatLit\", \"number.float\"],\r\n      [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\r\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\r\n      [/'/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringSingle\" }],\r\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@prototext\" }],\r\n      [/identifier/, \"identifier\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ],\r\n    prototext: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@constant\" },\r\n      [/@identifier/, \"identifier\"],\r\n      [/[:;]/, \"delimiter\"],\r\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
