{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/m3/m3.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/m3/m3.ts\r\nvar conf = {\r\n  comments: {\r\n    blockComment: [\"(*\", \"*)\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"(*\", close: \"*)\" },\r\n    { open: \"<*\", close: \"*>\" },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\r\n  ]\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".m3\",\r\n  brackets: [\r\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\r\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\r\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" }\r\n  ],\r\n  keywords: [\r\n    \"AND\",\r\n    \"ANY\",\r\n    \"ARRAY\",\r\n    \"AS\",\r\n    \"BEGIN\",\r\n    \"BITS\",\r\n    \"BRANDED\",\r\n    \"BY\",\r\n    \"CASE\",\r\n    \"CONST\",\r\n    \"DIV\",\r\n    \"DO\",\r\n    \"ELSE\",\r\n    \"ELSIF\",\r\n    \"END\",\r\n    \"EVAL\",\r\n    \"EXCEPT\",\r\n    \"EXCEPTION\",\r\n    \"EXIT\",\r\n    \"EXPORTS\",\r\n    \"FINALLY\",\r\n    \"FOR\",\r\n    \"FROM\",\r\n    \"GENERIC\",\r\n    \"IF\",\r\n    \"IMPORT\",\r\n    \"IN\",\r\n    \"INTERFACE\",\r\n    \"LOCK\",\r\n    \"LOOP\",\r\n    \"METHODS\",\r\n    \"MOD\",\r\n    \"MODULE\",\r\n    \"NOT\",\r\n    \"OBJECT\",\r\n    \"OF\",\r\n    \"OR\",\r\n    \"OVERRIDES\",\r\n    \"PROCEDURE\",\r\n    \"RAISE\",\r\n    \"RAISES\",\r\n    \"READONLY\",\r\n    \"RECORD\",\r\n    \"REF\",\r\n    \"REPEAT\",\r\n    \"RETURN\",\r\n    \"REVEAL\",\r\n    \"SET\",\r\n    \"THEN\",\r\n    \"TO\",\r\n    \"TRY\",\r\n    \"TYPE\",\r\n    \"TYPECASE\",\r\n    \"UNSAFE\",\r\n    \"UNTIL\",\r\n    \"UNTRACED\",\r\n    \"VALUE\",\r\n    \"VAR\",\r\n    \"WHILE\",\r\n    \"WITH\"\r\n  ],\r\n  reservedConstNames: [\r\n    \"ABS\",\r\n    \"ADR\",\r\n    \"ADRSIZE\",\r\n    \"BITSIZE\",\r\n    \"BYTESIZE\",\r\n    \"CEILING\",\r\n    \"DEC\",\r\n    \"DISPOSE\",\r\n    \"FALSE\",\r\n    \"FIRST\",\r\n    \"FLOAT\",\r\n    \"FLOOR\",\r\n    \"INC\",\r\n    \"ISTYPE\",\r\n    \"LAST\",\r\n    \"LOOPHOLE\",\r\n    \"MAX\",\r\n    \"MIN\",\r\n    \"NARROW\",\r\n    \"NEW\",\r\n    \"NIL\",\r\n    \"NUMBER\",\r\n    \"ORD\",\r\n    \"ROUND\",\r\n    \"SUBARRAY\",\r\n    \"TRUE\",\r\n    \"TRUNC\",\r\n    \"TYPECODE\",\r\n    \"VAL\"\r\n  ],\r\n  reservedTypeNames: [\r\n    \"ADDRESS\",\r\n    \"ANY\",\r\n    \"BOOLEAN\",\r\n    \"CARDINAL\",\r\n    \"CHAR\",\r\n    \"EXTENDED\",\r\n    \"INTEGER\",\r\n    \"LONGCARD\",\r\n    \"LONGINT\",\r\n    \"LONGREAL\",\r\n    \"MUTEX\",\r\n    \"NULL\",\r\n    \"REAL\",\r\n    \"REFANY\",\r\n    \"ROOT\",\r\n    \"TEXT\"\r\n  ],\r\n  operators: [\"+\", \"-\", \"*\", \"/\", \"&\", \"^\", \".\"],\r\n  relations: [\"=\", \"#\", \"<\", \"<=\", \">\", \">=\", \"<:\", \":\"],\r\n  delimiters: [\"|\", \"..\", \"=>\", \",\", \";\", \":=\"],\r\n  symbols: /[>=<#.,:;+\\-*/&^]+/,\r\n  escapes: /\\\\(?:[\\\\fnrt\"']|[0-7]{3})/,\r\n  tokenizer: {\r\n    root: [\r\n      [/_\\w*/, \"invalid\"],\r\n      [\r\n        /[a-zA-Z][a-zA-Z0-9_]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@reservedConstNames\": { token: \"constant.reserved.$0\" },\r\n            \"@reservedTypeNames\": { token: \"type.reserved.$0\" },\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[0-9]+\\.[0-9]+(?:[DdEeXx][\\+\\-]?[0-9]+)?/, \"number.float\"],\r\n      [/[0-9]+(?:\\_[0-9a-fA-F]+)?L?/, \"number\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"operators\",\r\n            \"@relations\": \"operators\",\r\n            \"@delimiters\": \"delimiter\",\r\n            \"@default\": \"invalid\"\r\n          }\r\n        }\r\n      ],\r\n      [/'[^\\\\']'/, \"string.char\"],\r\n      [/(')(@escapes)(')/, [\"string.char\", \"string.escape\", \"string.char\"]],\r\n      [/'/, \"invalid\"],\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"invalid\"],\r\n      [/\"/, \"string.text\", \"@text\"]\r\n    ],\r\n    text: [\r\n      [/[^\\\\\"]+/, \"string.text\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"invalid\"],\r\n      [/\"/, \"string.text\", \"@pop\"]\r\n    ],\r\n    comment: [\r\n      [/\\(\\*/, \"comment\", \"@push\"],\r\n      [/\\*\\)/, \"comment\", \"@pop\"],\r\n      [/./, \"comment\"]\r\n    ],\r\n    pragma: [\r\n      [/<\\*/, \"keyword.pragma\", \"@push\"],\r\n      [/\\*>/, \"keyword.pragma\", \"@pop\"],\r\n      [/./, \"keyword.pragma\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [/\\(\\*/, \"comment\", \"@comment\"],\r\n      [/<\\*/, \"keyword.pragma\", \"@pragma\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
