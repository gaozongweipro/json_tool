{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/coffee/coffee.ts\r\nvar conf = {\r\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n  comments: {\r\n    blockComment: [\"###\", \"###\"],\r\n    lineComment: \"#\"\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  ignoreCase: true,\r\n  tokenPostfix: \".coffee\",\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\r\n  ],\r\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\r\n  keywords: [\r\n    \"and\",\r\n    \"or\",\r\n    \"is\",\r\n    \"isnt\",\r\n    \"not\",\r\n    \"on\",\r\n    \"yes\",\r\n    \"@\",\r\n    \"no\",\r\n    \"off\",\r\n    \"true\",\r\n    \"false\",\r\n    \"null\",\r\n    \"this\",\r\n    \"new\",\r\n    \"delete\",\r\n    \"typeof\",\r\n    \"in\",\r\n    \"instanceof\",\r\n    \"return\",\r\n    \"throw\",\r\n    \"break\",\r\n    \"continue\",\r\n    \"debugger\",\r\n    \"if\",\r\n    \"else\",\r\n    \"switch\",\r\n    \"for\",\r\n    \"while\",\r\n    \"do\",\r\n    \"try\",\r\n    \"catch\",\r\n    \"finally\",\r\n    \"class\",\r\n    \"extends\",\r\n    \"super\",\r\n    \"undefined\",\r\n    \"then\",\r\n    \"unless\",\r\n    \"until\",\r\n    \"loop\",\r\n    \"of\",\r\n    \"by\",\r\n    \"when\"\r\n  ],\r\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  tokenizer: {\r\n    root: [\r\n      [/\\@[a-zA-Z_]\\w*/, \"variable.predefined\"],\r\n      [\r\n        /[a-zA-Z_]\\w*/,\r\n        {\r\n          cases: {\r\n            this: \"variable.predefined\",\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/###/, \"comment\", \"@comment\"],\r\n      [/#.*$/, \"comment\"],\r\n      [\"///\", { token: \"regexp\", next: \"@hereregexp\" }],\r\n      [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]],\r\n      [/(\\()(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\r\n      [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\=)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\[)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\r\n      [/(\\!)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\&)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\|)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\?)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\r\n      [/(\\{)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\r\n      [/(\\;)(\\s*)(@regEx)/, [\"\", \"\", \"regexp\"]],\r\n      [\r\n        /}/,\r\n        {\r\n          cases: {\r\n            \"$S2==interpolatedstring\": {\r\n              token: \"string\",\r\n              next: \"@pop\"\r\n            },\r\n            \"@default\": \"@brackets\"\r\n          }\r\n        }\r\n      ],\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/@symbols/, \"delimiter\"],\r\n      [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\r\n      [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\r\n      [/0[0-7]+(?!\\d)/, \"number.octal\"],\r\n      [/\\d+/, \"number\"],\r\n      [/[,.]/, \"delimiter\"],\r\n      [/\"\"\"/, \"string\", '@herestring.\"\"\"'],\r\n      [/'''/, \"string\", \"@herestring.'''\"],\r\n      [\r\n        /\"/,\r\n        {\r\n          cases: {\r\n            \"@eos\": \"string\",\r\n            \"@default\": { token: \"string\", next: '@string.\"' }\r\n          }\r\n        }\r\n      ],\r\n      [\r\n        /'/,\r\n        {\r\n          cases: {\r\n            \"@eos\": \"string\",\r\n            \"@default\": { token: \"string\", next: \"@string.'\" }\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    string: [\r\n      [/[^\"'\\#\\\\]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\./, \"string.escape.invalid\"],\r\n      [/\\./, \"string.escape.invalid\"],\r\n      [\r\n        /#{/,\r\n        {\r\n          cases: {\r\n            '$S2==\"': {\r\n              token: \"string\",\r\n              next: \"root.interpolatedstring\"\r\n            },\r\n            \"@default\": \"string\"\r\n          }\r\n        }\r\n      ],\r\n      [\r\n        /[\"']/,\r\n        {\r\n          cases: {\r\n            \"$#==$S2\": { token: \"string\", next: \"@pop\" },\r\n            \"@default\": \"string\"\r\n          }\r\n        }\r\n      ],\r\n      [/#/, \"string\"]\r\n    ],\r\n    herestring: [\r\n      [\r\n        /(\"\"\"|''')/,\r\n        {\r\n          cases: {\r\n            \"$1==$S2\": { token: \"string\", next: \"@pop\" },\r\n            \"@default\": \"string\"\r\n          }\r\n        }\r\n      ],\r\n      [/[^#\\\\'\"]+/, \"string\"],\r\n      [/['\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\./, \"string.escape.invalid\"],\r\n      [/#{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\r\n      [/#/, \"string\"]\r\n    ],\r\n    comment: [\r\n      [/[^#]+/, \"comment\"],\r\n      [/###/, \"comment\", \"@pop\"],\r\n      [/#/, \"comment\"]\r\n    ],\r\n    hereregexp: [\r\n      [/[^\\\\\\/#]+/, \"regexp\"],\r\n      [/\\\\./, \"regexp\"],\r\n      [/#.*$/, \"comment\"],\r\n      [\"///[igm]*\", { token: \"regexp\", next: \"@pop\" }],\r\n      [/\\//, \"regexp\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
