{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/kotlin/kotlin.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/kotlin/kotlin.ts\r\nvar conf = {\r\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" },\r\n    { open: \"<\", close: \">\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\r\n      end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".kt\",\r\n  keywords: [\r\n    \"as\",\r\n    \"as?\",\r\n    \"break\",\r\n    \"class\",\r\n    \"continue\",\r\n    \"do\",\r\n    \"else\",\r\n    \"false\",\r\n    \"for\",\r\n    \"fun\",\r\n    \"if\",\r\n    \"in\",\r\n    \"!in\",\r\n    \"interface\",\r\n    \"is\",\r\n    \"!is\",\r\n    \"null\",\r\n    \"object\",\r\n    \"package\",\r\n    \"return\",\r\n    \"super\",\r\n    \"this\",\r\n    \"throw\",\r\n    \"true\",\r\n    \"try\",\r\n    \"typealias\",\r\n    \"val\",\r\n    \"var\",\r\n    \"when\",\r\n    \"while\",\r\n    \"by\",\r\n    \"catch\",\r\n    \"constructor\",\r\n    \"delegate\",\r\n    \"dynamic\",\r\n    \"field\",\r\n    \"file\",\r\n    \"finally\",\r\n    \"get\",\r\n    \"import\",\r\n    \"init\",\r\n    \"param\",\r\n    \"property\",\r\n    \"receiver\",\r\n    \"set\",\r\n    \"setparam\",\r\n    \"where\",\r\n    \"actual\",\r\n    \"abstract\",\r\n    \"annotation\",\r\n    \"companion\",\r\n    \"const\",\r\n    \"crossinline\",\r\n    \"data\",\r\n    \"enum\",\r\n    \"expect\",\r\n    \"external\",\r\n    \"final\",\r\n    \"infix\",\r\n    \"inline\",\r\n    \"inner\",\r\n    \"internal\",\r\n    \"lateinit\",\r\n    \"noinline\",\r\n    \"open\",\r\n    \"operator\",\r\n    \"out\",\r\n    \"override\",\r\n    \"private\",\r\n    \"protected\",\r\n    \"public\",\r\n    \"reified\",\r\n    \"sealed\",\r\n    \"suspend\",\r\n    \"tailrec\",\r\n    \"vararg\",\r\n    \"field\",\r\n    \"it\"\r\n  ],\r\n  operators: [\r\n    \"+\",\r\n    \"-\",\r\n    \"*\",\r\n    \"/\",\r\n    \"%\",\r\n    \"=\",\r\n    \"+=\",\r\n    \"-=\",\r\n    \"*=\",\r\n    \"/=\",\r\n    \"%=\",\r\n    \"++\",\r\n    \"--\",\r\n    \"&&\",\r\n    \"||\",\r\n    \"!\",\r\n    \"==\",\r\n    \"!=\",\r\n    \"===\",\r\n    \"!==\",\r\n    \">\",\r\n    \"<\",\r\n    \"<=\",\r\n    \">=\",\r\n    \"[\",\r\n    \"]\",\r\n    \"!!\",\r\n    \"?.\",\r\n    \"?:\",\r\n    \"::\",\r\n    \"..\",\r\n    \":\",\r\n    \"?\",\r\n    \"->\",\r\n    \"@\",\r\n    \";\",\r\n    \"$\",\r\n    \"_\"\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  digits: /\\d+(_+\\d+)*/,\r\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n  tokenizer: {\r\n    root: [\r\n      [/[A-Z][\\w\\$]*/, \"type.identifier\"],\r\n      [\r\n        /[a-zA-Z_$][\\w$]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"delimiter\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, \"annotation\"],\r\n      [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, \"number.float\"],\r\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, \"number.float\"],\r\n      [/0[xX](@hexdigits)[Ll]?/, \"number.hex\"],\r\n      [/0(@octaldigits)[Ll]?/, \"number.octal\"],\r\n      [/0[bB](@binarydigits)[Ll]?/, \"number.binary\"],\r\n      [/(@digits)[fFdD]/, \"number.float\"],\r\n      [/(@digits)[lL]?/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/\"\"\"/, \"string\", \"@multistring\"],\r\n      [/\"/, \"string\", \"@string\"],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\r\n      [/'/, \"string.invalid\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@javadoc\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    javadoc: [\r\n      [/[^\\/*]+/, \"comment.doc\"],\r\n      [/\\/\\*/, \"comment.doc\", \"@push\"],\r\n      [/\\/\\*/, \"comment.doc.invalid\"],\r\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\r\n      [/[\\/*]/, \"comment.doc\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, \"string\", \"@pop\"]\r\n    ],\r\n    multistring: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"\"\"/, \"string\", \"@pop\"],\r\n      [/./, \"string\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
