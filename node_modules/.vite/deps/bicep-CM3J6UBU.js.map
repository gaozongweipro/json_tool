{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/bicep/bicep.ts\r\nvar bounded = (text) => `\\\\b${text}\\\\b`;\r\nvar identifierStart = \"[_a-zA-Z]\";\r\nvar identifierContinue = \"[_a-zA-Z0-9]\";\r\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\r\nvar keywords = [\r\n  \"targetScope\",\r\n  \"resource\",\r\n  \"module\",\r\n  \"param\",\r\n  \"var\",\r\n  \"output\",\r\n  \"for\",\r\n  \"in\",\r\n  \"if\",\r\n  \"existing\"\r\n];\r\nvar namedLiterals = [\"true\", \"false\", \"null\"];\r\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\r\nvar numericLiteral = `[0-9]+`;\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"'\", close: \"'\" },\r\n    { open: \"'''\", close: \"'''\" }\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  autoCloseBefore: \":.,=}])' \\n\t\",\r\n  indentationRules: {\r\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\r\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".bicep\",\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n  keywords,\r\n  namedLiterals,\r\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\r\n  tokenizer: {\r\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\r\n    stringVerbatim: [\r\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\r\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\r\n    ],\r\n    stringLiteral: [\r\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\r\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\r\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\r\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\r\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\r\n    ],\r\n    bracketCounting: [\r\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\r\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\r\n      { include: \"expression\" }\r\n    ],\r\n    comment: [\r\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\r\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\r\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\r\n    ],\r\n    whitespace: [\r\n      { regex: nonCommentWs },\r\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\r\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\r\n    ],\r\n    expression: [\r\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\r\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\r\n      { regex: numericLiteral, action: { token: \"number\" } },\r\n      {\r\n        regex: identifier,\r\n        action: {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword\" },\r\n            \"@namedLiterals\": { token: \"keyword\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
