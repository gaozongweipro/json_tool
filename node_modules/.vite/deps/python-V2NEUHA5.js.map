{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/python/python.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\r\n\r\n// src/fillers/monaco-editor-core.ts\r\nvar monaco_editor_core_exports = {};\r\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\r\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\r\n\r\n// src/basic-languages/python/python.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"#\",\r\n    blockComment: [\"'''\", \"'''\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"', notIn: [\"string\"] },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  onEnterRules: [\r\n    {\r\n      beforeText: new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async|match|case).*?:\\\\s*$\"),\r\n      action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\r\n    }\r\n  ],\r\n  folding: {\r\n    offSide: true,\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".python\",\r\n  keywords: [\r\n    \"False\",\r\n    \"None\",\r\n    \"True\",\r\n    \"_\",\r\n    \"and\",\r\n    \"as\",\r\n    \"assert\",\r\n    \"async\",\r\n    \"await\",\r\n    \"break\",\r\n    \"case\",\r\n    \"class\",\r\n    \"continue\",\r\n    \"def\",\r\n    \"del\",\r\n    \"elif\",\r\n    \"else\",\r\n    \"except\",\r\n    \"exec\",\r\n    \"finally\",\r\n    \"for\",\r\n    \"from\",\r\n    \"global\",\r\n    \"if\",\r\n    \"import\",\r\n    \"in\",\r\n    \"is\",\r\n    \"lambda\",\r\n    \"match\",\r\n    \"nonlocal\",\r\n    \"not\",\r\n    \"or\",\r\n    \"pass\",\r\n    \"print\",\r\n    \"raise\",\r\n    \"return\",\r\n    \"try\",\r\n    \"while\",\r\n    \"with\",\r\n    \"yield\",\r\n    \"int\",\r\n    \"float\",\r\n    \"long\",\r\n    \"complex\",\r\n    \"hex\",\r\n    \"abs\",\r\n    \"all\",\r\n    \"any\",\r\n    \"apply\",\r\n    \"basestring\",\r\n    \"bin\",\r\n    \"bool\",\r\n    \"buffer\",\r\n    \"bytearray\",\r\n    \"callable\",\r\n    \"chr\",\r\n    \"classmethod\",\r\n    \"cmp\",\r\n    \"coerce\",\r\n    \"compile\",\r\n    \"complex\",\r\n    \"delattr\",\r\n    \"dict\",\r\n    \"dir\",\r\n    \"divmod\",\r\n    \"enumerate\",\r\n    \"eval\",\r\n    \"execfile\",\r\n    \"file\",\r\n    \"filter\",\r\n    \"format\",\r\n    \"frozenset\",\r\n    \"getattr\",\r\n    \"globals\",\r\n    \"hasattr\",\r\n    \"hash\",\r\n    \"help\",\r\n    \"id\",\r\n    \"input\",\r\n    \"intern\",\r\n    \"isinstance\",\r\n    \"issubclass\",\r\n    \"iter\",\r\n    \"len\",\r\n    \"locals\",\r\n    \"list\",\r\n    \"map\",\r\n    \"max\",\r\n    \"memoryview\",\r\n    \"min\",\r\n    \"next\",\r\n    \"object\",\r\n    \"oct\",\r\n    \"open\",\r\n    \"ord\",\r\n    \"pow\",\r\n    \"print\",\r\n    \"property\",\r\n    \"reversed\",\r\n    \"range\",\r\n    \"raw_input\",\r\n    \"reduce\",\r\n    \"reload\",\r\n    \"repr\",\r\n    \"reversed\",\r\n    \"round\",\r\n    \"self\",\r\n    \"set\",\r\n    \"setattr\",\r\n    \"slice\",\r\n    \"sorted\",\r\n    \"staticmethod\",\r\n    \"str\",\r\n    \"sum\",\r\n    \"super\",\r\n    \"tuple\",\r\n    \"type\",\r\n    \"unichr\",\r\n    \"unicode\",\r\n    \"vars\",\r\n    \"xrange\",\r\n    \"zip\",\r\n    \"__dict__\",\r\n    \"__methods__\",\r\n    \"__members__\",\r\n    \"__class__\",\r\n    \"__bases__\",\r\n    \"__name__\",\r\n    \"__mro__\",\r\n    \"__subclasses__\",\r\n    \"__init__\",\r\n    \"__import__\"\r\n  ],\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.bracket\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\r\n  ],\r\n  tokenizer: {\r\n    root: [\r\n      { include: \"@whitespace\" },\r\n      { include: \"@numbers\" },\r\n      { include: \"@strings\" },\r\n      [/[,:;]/, \"delimiter\"],\r\n      [/[{}\\[\\]()]/, \"@brackets\"],\r\n      [/@[a-zA-Z_]\\w*/, \"tag\"],\r\n      [\r\n        /[a-zA-Z_]\\w*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword\",\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    whitespace: [\r\n      [/\\s+/, \"white\"],\r\n      [/(^#.*$)/, \"comment\"],\r\n      [/'''/, \"string\", \"@endDocString\"],\r\n      [/\"\"\"/, \"string\", \"@endDblDocString\"]\r\n    ],\r\n    endDocString: [\r\n      [/[^']+/, \"string\"],\r\n      [/\\\\'/, \"string\"],\r\n      [/'''/, \"string\", \"@popall\"],\r\n      [/'/, \"string\"]\r\n    ],\r\n    endDblDocString: [\r\n      [/[^\"]+/, \"string\"],\r\n      [/\\\\\"/, \"string\"],\r\n      [/\"\"\"/, \"string\", \"@popall\"],\r\n      [/\"/, \"string\"]\r\n    ],\r\n    numbers: [\r\n      [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, \"number.hex\"],\r\n      [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, \"number\"]\r\n    ],\r\n    strings: [\r\n      [/'$/, \"string.escape\", \"@popall\"],\r\n      [/'/, \"string.escape\", \"@stringBody\"],\r\n      [/\"$/, \"string.escape\", \"@popall\"],\r\n      [/\"/, \"string.escape\", \"@dblStringBody\"]\r\n    ],\r\n    stringBody: [\r\n      [/[^\\\\']+$/, \"string\", \"@popall\"],\r\n      [/[^\\\\']+/, \"string\"],\r\n      [/\\\\./, \"string\"],\r\n      [/'/, \"string.escape\", \"@popall\"],\r\n      [/\\\\$/, \"string\"]\r\n    ],\r\n    dblStringBody: [\r\n      [/[^\\\\\"]+$/, \"string\", \"@popall\"],\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/\\\\./, \"string\"],\r\n      [/\"/, \"string.escape\", \"@popall\"],\r\n      [/\\\\$/, \"string\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
