{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/cpp/cpp.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/cpp/cpp.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\r\n    { open: '\"', close: '\"', notIn: [\"string\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\r\n      end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".cpp\",\r\n  brackets: [\r\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\r\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\r\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\r\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\r\n  ],\r\n  keywords: [\r\n    \"abstract\",\r\n    \"amp\",\r\n    \"array\",\r\n    \"auto\",\r\n    \"bool\",\r\n    \"break\",\r\n    \"case\",\r\n    \"catch\",\r\n    \"char\",\r\n    \"class\",\r\n    \"const\",\r\n    \"constexpr\",\r\n    \"const_cast\",\r\n    \"continue\",\r\n    \"cpu\",\r\n    \"decltype\",\r\n    \"default\",\r\n    \"delegate\",\r\n    \"delete\",\r\n    \"do\",\r\n    \"double\",\r\n    \"dynamic_cast\",\r\n    \"each\",\r\n    \"else\",\r\n    \"enum\",\r\n    \"event\",\r\n    \"explicit\",\r\n    \"export\",\r\n    \"extern\",\r\n    \"false\",\r\n    \"final\",\r\n    \"finally\",\r\n    \"float\",\r\n    \"for\",\r\n    \"friend\",\r\n    \"gcnew\",\r\n    \"generic\",\r\n    \"goto\",\r\n    \"if\",\r\n    \"in\",\r\n    \"initonly\",\r\n    \"inline\",\r\n    \"int\",\r\n    \"interface\",\r\n    \"interior_ptr\",\r\n    \"internal\",\r\n    \"literal\",\r\n    \"long\",\r\n    \"mutable\",\r\n    \"namespace\",\r\n    \"new\",\r\n    \"noexcept\",\r\n    \"nullptr\",\r\n    \"__nullptr\",\r\n    \"operator\",\r\n    \"override\",\r\n    \"partial\",\r\n    \"pascal\",\r\n    \"pin_ptr\",\r\n    \"private\",\r\n    \"property\",\r\n    \"protected\",\r\n    \"public\",\r\n    \"ref\",\r\n    \"register\",\r\n    \"reinterpret_cast\",\r\n    \"restrict\",\r\n    \"return\",\r\n    \"safe_cast\",\r\n    \"sealed\",\r\n    \"short\",\r\n    \"signed\",\r\n    \"sizeof\",\r\n    \"static\",\r\n    \"static_assert\",\r\n    \"static_cast\",\r\n    \"struct\",\r\n    \"switch\",\r\n    \"template\",\r\n    \"this\",\r\n    \"thread_local\",\r\n    \"throw\",\r\n    \"tile_static\",\r\n    \"true\",\r\n    \"try\",\r\n    \"typedef\",\r\n    \"typeid\",\r\n    \"typename\",\r\n    \"union\",\r\n    \"unsigned\",\r\n    \"using\",\r\n    \"virtual\",\r\n    \"void\",\r\n    \"volatile\",\r\n    \"wchar_t\",\r\n    \"where\",\r\n    \"while\",\r\n    \"_asm\",\r\n    \"_based\",\r\n    \"_cdecl\",\r\n    \"_declspec\",\r\n    \"_fastcall\",\r\n    \"_if_exists\",\r\n    \"_if_not_exists\",\r\n    \"_inline\",\r\n    \"_multiple_inheritance\",\r\n    \"_pascal\",\r\n    \"_single_inheritance\",\r\n    \"_stdcall\",\r\n    \"_virtual_inheritance\",\r\n    \"_w64\",\r\n    \"__abstract\",\r\n    \"__alignof\",\r\n    \"__asm\",\r\n    \"__assume\",\r\n    \"__based\",\r\n    \"__box\",\r\n    \"__builtin_alignof\",\r\n    \"__cdecl\",\r\n    \"__clrcall\",\r\n    \"__declspec\",\r\n    \"__delegate\",\r\n    \"__event\",\r\n    \"__except\",\r\n    \"__fastcall\",\r\n    \"__finally\",\r\n    \"__forceinline\",\r\n    \"__gc\",\r\n    \"__hook\",\r\n    \"__identifier\",\r\n    \"__if_exists\",\r\n    \"__if_not_exists\",\r\n    \"__inline\",\r\n    \"__int128\",\r\n    \"__int16\",\r\n    \"__int32\",\r\n    \"__int64\",\r\n    \"__int8\",\r\n    \"__interface\",\r\n    \"__leave\",\r\n    \"__m128\",\r\n    \"__m128d\",\r\n    \"__m128i\",\r\n    \"__m256\",\r\n    \"__m256d\",\r\n    \"__m256i\",\r\n    \"__m512\",\r\n    \"__m512d\",\r\n    \"__m512i\",\r\n    \"__m64\",\r\n    \"__multiple_inheritance\",\r\n    \"__newslot\",\r\n    \"__nogc\",\r\n    \"__noop\",\r\n    \"__nounwind\",\r\n    \"__novtordisp\",\r\n    \"__pascal\",\r\n    \"__pin\",\r\n    \"__pragma\",\r\n    \"__property\",\r\n    \"__ptr32\",\r\n    \"__ptr64\",\r\n    \"__raise\",\r\n    \"__restrict\",\r\n    \"__resume\",\r\n    \"__sealed\",\r\n    \"__single_inheritance\",\r\n    \"__stdcall\",\r\n    \"__super\",\r\n    \"__thiscall\",\r\n    \"__try\",\r\n    \"__try_cast\",\r\n    \"__typeof\",\r\n    \"__unaligned\",\r\n    \"__unhook\",\r\n    \"__uuidof\",\r\n    \"__value\",\r\n    \"__virtual_inheritance\",\r\n    \"__w64\",\r\n    \"__wchar_t\"\r\n  ],\r\n  operators: [\r\n    \"=\",\r\n    \">\",\r\n    \"<\",\r\n    \"!\",\r\n    \"~\",\r\n    \"?\",\r\n    \":\",\r\n    \"==\",\r\n    \"<=\",\r\n    \">=\",\r\n    \"!=\",\r\n    \"&&\",\r\n    \"||\",\r\n    \"++\",\r\n    \"--\",\r\n    \"+\",\r\n    \"-\",\r\n    \"*\",\r\n    \"/\",\r\n    \"&\",\r\n    \"|\",\r\n    \"^\",\r\n    \"%\",\r\n    \"<<\",\r\n    \">>\",\r\n    \">>>\",\r\n    \"+=\",\r\n    \"-=\",\r\n    \"*=\",\r\n    \"/=\",\r\n    \"&=\",\r\n    \"|=\",\r\n    \"^=\",\r\n    \"%=\",\r\n    \"<<=\",\r\n    \">>=\",\r\n    \">>>=\"\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  escapes: /\\\\(?:[0abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,\r\n  floatsuffix: /[fFlL]?/,\r\n  encoding: /u|u8|U|L/,\r\n  tokenizer: {\r\n    root: [\r\n      [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: \"string.raw.begin\", next: \"@raw.$1\" }],\r\n      [\r\n        /[a-zA-Z_]\\w*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/^\\s*#\\s*include/, { token: \"keyword.directive.include\", next: \"@include\" }],\r\n      [/^\\s*#\\s*\\w+/, \"keyword.directive\"],\r\n      { include: \"@whitespace\" },\r\n      [/\\[\\s*\\[/, { token: \"annotation\", next: \"@annotation\" }],\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"delimiter\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\r\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, \"number.float\"],\r\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, \"number.hex\"],\r\n      [/0[0-7']*[0-7](@integersuffix)/, \"number.octal\"],\r\n      [/0[bB][0-1']*[0-1](@integersuffix)/, \"number.binary\"],\r\n      [/\\d[\\d']*\\d(@integersuffix)/, \"number\"],\r\n      [/\\d(@integersuffix)/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/\"/, \"string\", \"@string\"],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\r\n      [/'/, \"string.invalid\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@doccomment\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*\\\\$/, \"comment\", \"@linecomment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    linecomment: [\r\n      [/.*[^\\\\]$/, \"comment\", \"@pop\"],\r\n      [/[^]+/, \"comment\"]\r\n    ],\r\n    doccomment: [\r\n      [/[^\\/*]+/, \"comment.doc\"],\r\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\r\n      [/[\\/*]/, \"comment.doc\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, \"string\", \"@pop\"]\r\n    ],\r\n    raw: [\r\n      [\r\n        /(.*)(\\))(?:([^ ()\\\\\\t\"]*))(\\\")/,\r\n        {\r\n          cases: {\r\n            \"$3==$S2\": [\r\n              \"string.raw\",\r\n              \"string.raw.end\",\r\n              \"string.raw.end\",\r\n              { token: \"string.raw.end\", next: \"@pop\" }\r\n            ],\r\n            \"@default\": [\"string.raw\", \"string.raw\", \"string.raw\", \"string.raw\"]\r\n          }\r\n        }\r\n      ],\r\n      [/.*/, \"string.raw\"]\r\n    ],\r\n    annotation: [\r\n      { include: \"@whitespace\" },\r\n      [/using|alignas/, \"keyword\"],\r\n      [/[a-zA-Z0-9_]+/, \"annotation\"],\r\n      [/[,:]/, \"delimiter\"],\r\n      [/[()]/, \"@brackets\"],\r\n      [/\\]\\s*\\]/, { token: \"annotation\", next: \"@pop\" }]\r\n    ],\r\n    include: [\r\n      [\r\n        /(\\s*)(<)([^<>]*)(>)/,\r\n        [\r\n          \"\",\r\n          \"keyword.directive.include.begin\",\r\n          \"string.include.identifier\",\r\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\r\n        ]\r\n      ],\r\n      [\r\n        /(\\s*)(\")([^\"]*)(\")/,\r\n        [\r\n          \"\",\r\n          \"keyword.directive.include.begin\",\r\n          \"string.include.identifier\",\r\n          { token: \"keyword.directive.include.end\", next: \"@pop\" }\r\n        ]\r\n      ]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
