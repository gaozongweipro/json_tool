{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n// src/basic-languages/csharp/csharp.ts\r\nvar conf = {\r\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\" },\r\n    { open: \"'\", close: \"'\" },\r\n    { open: '\"', close: '\"' }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".cs\",\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  keywords: [\r\n    \"extern\",\r\n    \"alias\",\r\n    \"using\",\r\n    \"bool\",\r\n    \"decimal\",\r\n    \"sbyte\",\r\n    \"byte\",\r\n    \"short\",\r\n    \"ushort\",\r\n    \"int\",\r\n    \"uint\",\r\n    \"long\",\r\n    \"ulong\",\r\n    \"char\",\r\n    \"float\",\r\n    \"double\",\r\n    \"object\",\r\n    \"dynamic\",\r\n    \"string\",\r\n    \"assembly\",\r\n    \"is\",\r\n    \"as\",\r\n    \"ref\",\r\n    \"out\",\r\n    \"this\",\r\n    \"base\",\r\n    \"new\",\r\n    \"typeof\",\r\n    \"void\",\r\n    \"checked\",\r\n    \"unchecked\",\r\n    \"default\",\r\n    \"delegate\",\r\n    \"var\",\r\n    \"const\",\r\n    \"if\",\r\n    \"else\",\r\n    \"switch\",\r\n    \"case\",\r\n    \"while\",\r\n    \"do\",\r\n    \"for\",\r\n    \"foreach\",\r\n    \"in\",\r\n    \"break\",\r\n    \"continue\",\r\n    \"goto\",\r\n    \"return\",\r\n    \"throw\",\r\n    \"try\",\r\n    \"catch\",\r\n    \"finally\",\r\n    \"lock\",\r\n    \"yield\",\r\n    \"from\",\r\n    \"let\",\r\n    \"where\",\r\n    \"join\",\r\n    \"on\",\r\n    \"equals\",\r\n    \"into\",\r\n    \"orderby\",\r\n    \"ascending\",\r\n    \"descending\",\r\n    \"select\",\r\n    \"group\",\r\n    \"by\",\r\n    \"namespace\",\r\n    \"partial\",\r\n    \"class\",\r\n    \"field\",\r\n    \"event\",\r\n    \"method\",\r\n    \"param\",\r\n    \"public\",\r\n    \"protected\",\r\n    \"internal\",\r\n    \"private\",\r\n    \"abstract\",\r\n    \"sealed\",\r\n    \"static\",\r\n    \"struct\",\r\n    \"readonly\",\r\n    \"volatile\",\r\n    \"virtual\",\r\n    \"override\",\r\n    \"params\",\r\n    \"get\",\r\n    \"set\",\r\n    \"add\",\r\n    \"remove\",\r\n    \"operator\",\r\n    \"true\",\r\n    \"false\",\r\n    \"implicit\",\r\n    \"explicit\",\r\n    \"interface\",\r\n    \"enum\",\r\n    \"null\",\r\n    \"async\",\r\n    \"await\",\r\n    \"fixed\",\r\n    \"sizeof\",\r\n    \"stackalloc\",\r\n    \"unsafe\",\r\n    \"nameof\",\r\n    \"when\"\r\n  ],\r\n  namespaceFollows: [\"namespace\", \"using\"],\r\n  parenFollows: [\"if\", \"for\", \"while\", \"switch\", \"foreach\", \"using\", \"catch\", \"when\"],\r\n  operators: [\r\n    \"=\",\r\n    \"??\",\r\n    \"||\",\r\n    \"&&\",\r\n    \"|\",\r\n    \"^\",\r\n    \"&\",\r\n    \"==\",\r\n    \"!=\",\r\n    \"<=\",\r\n    \">=\",\r\n    \"<<\",\r\n    \"+\",\r\n    \"-\",\r\n    \"*\",\r\n    \"/\",\r\n    \"%\",\r\n    \"!\",\r\n    \"~\",\r\n    \"++\",\r\n    \"--\",\r\n    \"+=\",\r\n    \"-=\",\r\n    \"*=\",\r\n    \"/=\",\r\n    \"%=\",\r\n    \"&=\",\r\n    \"|=\",\r\n    \"^=\",\r\n    \"<<=\",\r\n    \">>=\",\r\n    \">>\",\r\n    \"=>\"\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  tokenizer: {\r\n    root: [\r\n      [\r\n        /\\@?[a-zA-Z_]\\w*/,\r\n        {\r\n          cases: {\r\n            \"@namespaceFollows\": {\r\n              token: \"keyword.$0\",\r\n              next: \"@namespace\"\r\n            },\r\n            \"@keywords\": {\r\n              token: \"keyword.$0\",\r\n              next: \"@qualified\"\r\n            },\r\n            \"@default\": { token: \"identifier\", next: \"@qualified\" }\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@whitespace\" },\r\n      [\r\n        /}/,\r\n        {\r\n          cases: {\r\n            \"$S2==interpolatedstring\": {\r\n              token: \"string.quote\",\r\n              next: \"@pop\"\r\n            },\r\n            \"$S2==litinterpstring\": {\r\n              token: \"string.quote\",\r\n              next: \"@pop\"\r\n            },\r\n            \"@default\": \"@brackets\"\r\n          }\r\n        }\r\n      ],\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/[<>](?!@symbols)/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"delimiter\",\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, \"number.float\"],\r\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\r\n      [/0[bB][01_]+/, \"number.hex\"],\r\n      [/[0-9_]+/, \"number\"],\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      [/\"/, { token: \"string.quote\", next: \"@string\" }],\r\n      [/\\$\\@\"/, { token: \"string.quote\", next: \"@litinterpstring\" }],\r\n      [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }],\r\n      [/\\$\"/, { token: \"string.quote\", next: \"@interpolatedstring\" }],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\r\n      [/'/, \"string.invalid\"]\r\n    ],\r\n    qualified: [\r\n      [\r\n        /[a-zA-Z_][\\w]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      [/\\./, \"delimiter\"],\r\n      [\"\", \"\", \"@pop\"]\r\n    ],\r\n    namespace: [\r\n      { include: \"@whitespace\" },\r\n      [/[A-Z]\\w*/, \"namespace\"],\r\n      [/[\\.=]/, \"delimiter\"],\r\n      [\"\", \"\", \"@pop\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [\"\\\\*/\", \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\r\n    ],\r\n    litstring: [\r\n      [/[^\"]+/, \"string\"],\r\n      [/\"\"/, \"string.escape\"],\r\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\r\n    ],\r\n    litinterpstring: [\r\n      [/[^\"{]+/, \"string\"],\r\n      [/\"\"/, \"string.escape\"],\r\n      [/{{/, \"string.escape\"],\r\n      [/}}/, \"string.escape\"],\r\n      [/{/, { token: \"string.quote\", next: \"root.litinterpstring\" }],\r\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\r\n    ],\r\n    interpolatedstring: [\r\n      [/[^\\\\\"{]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/{{/, \"string.escape\"],\r\n      [/}}/, \"string.escape\"],\r\n      [/{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\r\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\r\n    ],\r\n    whitespace: [\r\n      [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, \"directive.csx\"],\r\n      [/^[ \\t\\v\\f]*#\\w.*$/, \"namespace.cpp\"],\r\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": ";;;AAQA,IAAI,OAAO;AAAA,EACT,aAAa;AAAA,EACb,UAAU;AAAA,IACR,aAAa;AAAA,IACb,cAAc,CAAC,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,UAAU;AAAA,IACR,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,IACT,CAAC,KAAK,GAAG;AAAA,EACX;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,CAAC,UAAU,SAAS,EAAE;AAAA,IACtD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,CAAC,UAAU,SAAS,EAAE;AAAA,EACxD;AAAA,EACA,kBAAkB;AAAA,IAChB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,IACxB,EAAE,MAAM,KAAK,OAAO,IAAI;AAAA,EAC1B;AAAA,EACA,SAAS;AAAA,IACP,SAAS;AAAA,MACP,OAAO,IAAI,OAAO,iBAAiB;AAAA,MACnC,KAAK,IAAI,OAAO,oBAAoB;AAAA,IACtC;AAAA,EACF;AACF;AACA,IAAI,WAAW;AAAA,EACb,cAAc;AAAA,EACd,cAAc;AAAA,EACd,UAAU;AAAA,IACR,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,kBAAkB;AAAA,IAClD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,mBAAmB;AAAA,IACnD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,wBAAwB;AAAA,IACxD,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,kBAAkB;AAAA,EACpkBAAkB,CAAC,aAAa,OAAO;AAAA,EACvC,cAAc,CAAC,MAAM,OAAO,SAAS,UAAU,WAAW,SAAS,SAAS,MAAM;AAAA,EAClF,WAAW;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,SAAS;AAAA,EACT,SAAS;AAAA,EACT,WAAW;AAAA,IACT,MAAM;AAAA,MACJ;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,qBAAqB;AAAA,cACnB,OAAO;AAAA,cACP,MAAM;AAAA,YACR;AAAA,YACA,aAAa;AAAA,cACX,OAAO;AAAA,cACP,MAAM;AAAA,YACR;AAAA,YACA,YAAY,EAAE,OAAO,cAAc,MAAM,aAAa;AAAA,UACxD;AAAA,QACF;AAAA,MACF;AAAA,MACA,EAAE,SAAS,cAAc;AAAA,MACzB;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,2BAA2B;AAAA,cACzB,OAAO;AAAA,cACP,MAAM;AAAA,YACR;AAAA,YACA,wBAAwB;AAAA,cACtB,OAAO;AAAA,cACP,MAAM;AAAA,YACR;AAAA,YACA,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,CAAC,cAAc,WAAW;AAAA,MAC1B,CAAC,oBAAoB,WAAW;AAAA,MAChC;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,cAAc;AAAA,YACd,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,CAAC,2CAA2C,cAAc;AAAA,MAC1D,CAAC,sBAAsB,YAAY;AAAA,MACnC,CAAC,eAAe,YAAY;AAAA,MAC5B,CAAC,WAAW,QAAQ;AAAA,MACpB,CAAC,SAAS,WAAW;AAAA,MACrB,CAAC,mBAAmB,gBAAgB;AAAA,MACpC,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,UAAU,CAAC;AAAA,MAChD,CAAC,SAAS,EAAE,OAAO,gBAAgB,MAAM,mBAAmB,CAAC;AAAA,MAC7D,CAAC,OAAO,EAAE,OAAO,gBAAgB,MAAM,aAAa,CAAC;AAAA,MACrD,CAAC,OAAO,EAAE,OAAO,gBAAgB,MAAM,sBAAsB,CAAC;AAAA,MAC9D,CAAC,YAAY,QAAQ;AAAA,MACrB,CAAC,oBAAoB,CAAC,UAAU,iBAAiB,QAAQ,CAAC;AAAA,MAC1D,CAAC,KAAK,gBAAgB;AAAA,IACxB;AAAA,IACA,WAAW;AAAA,MACT;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,YACL,aAAa,EAAE,OAAO,aAAa;AAAA,YACnC,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,CAAC,MAAM,WAAW;AAAA,MAClB,CAAC,IAAI,IAAI,MAAM;AAAA,IACjB;AAAA,IACA,WAAW;AAAA,MACT,EAAE,SAAS,cAAc;AAAA,MACzB,CAAC,YAAY,WAAW;AAAA,MACxB,CAAC,SAAS,WAAW;AAAA,MACrB,CAAC,IAAI,IAAI,MAAM;AAAA,IACjB;AAAA,IACA,SAAS;AAAA,MACP,CAAC,WAAW,SAAS;AAAA,MACrB,CAAC,QAAQ,WAAW,MAAM;AAAA,MAC1B,CAAC,SAAS,SAAS;AAAA,IACrB;AAAA,IACA,QAAQ;AAAA,MACN,CAAC,WAAW,QAAQ;AAAA,MACpB,CAAC,YAAY,eAAe;AAAA,MAC5B,CAAC,OAAO,uBAAuB;AAAA,MAC/B,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,OAAO,CAAC;AAAA,IAC/C;AAAA,IACA,WAAW;AAAA,MACT,CAAC,SAAS,QAAQ;AAAA,MAClB,CAAC,MAAM,eAAe;AAAA,MACtB,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,OAAO,CAAC;AAAA,IAC/C;AAAA,IACA,iBAAiB;AAAA,MACf,CAAC,UAAU,QAAQ;AAAA,MACnB,CAAC,MAAM,eAAe;AAAA,MACtB,CAAC,MAAM,eAAe;AAAA,MACtB,CAAC,MAAM,eAAe;AAAA,MACtB,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,uBAAuB,CAAC;AAAA,MAC7D,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,OAAO,CAAC;AAAA,IAC/C;AAAA,IACA,oBAAoB;AAAA,MAClB,CAAC,YAAY,QAAQ;AAAA,MACrB,CAAC,YAAY,eAAe;AAAA,MAC5B,CAAC,OAAO,uBAAuB;AAAA,MAC/B,CAAC,MAAM,eAAe;AAAA,MACtB,CAAC,MAAM,eAAe;AAAA,MACtB,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,0BAA0B,CAAC;AAAA,MAChE,CAAC,KAAK,EAAE,OAAO,gBAAgB,MAAM,OAAO,CAAC;AAAA,IAC/C;AAAA,IACA,YAAY;AAAA,MACV,CAAC,kCAAkC,eAAe;AAAA,MAClD,CAAC,qBAAqB,eAAe;AAAA,MACrC,CAAC,kBAAkB,EAAE;AAAA,MACrB,CAAC,QAAQ,WAAW,UAAU;AAAA,MAC9B,CAAC,WAAW,SAAS;AAAA,IACvB;AAAA,EACF;AACF;",
  "names": []
}
